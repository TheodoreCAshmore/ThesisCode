// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Communication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Communication_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Communication_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Communication_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Communication_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_Communication_2eproto;
namespace MessageStructures {
class KineDispose;
struct KineDisposeDefaultTypeInternal;
extern KineDisposeDefaultTypeInternal _KineDispose_default_instance_;
class KineInsert;
struct KineInsertDefaultTypeInternal;
extern KineInsertDefaultTypeInternal _KineInsert_default_instance_;
class KineMassDisposeCompaction;
struct KineMassDisposeCompactionDefaultTypeInternal;
extern KineMassDisposeCompactionDefaultTypeInternal _KineMassDisposeCompaction_default_instance_;
class KineQueryCompactRevision;
struct KineQueryCompactRevisionDefaultTypeInternal;
extern KineQueryCompactRevisionDefaultTypeInternal _KineQueryCompactRevision_default_instance_;
class KineQueryGeneric;
struct KineQueryGenericDefaultTypeInternal;
extern KineQueryGenericDefaultTypeInternal _KineQueryGeneric_default_instance_;
class KineQueryMaximumId;
struct KineQueryMaximumIdDefaultTypeInternal;
extern KineQueryMaximumIdDefaultTypeInternal _KineQueryMaximumId_default_instance_;
class KineQueryThree;
struct KineQueryThreeDefaultTypeInternal;
extern KineQueryThreeDefaultTypeInternal _KineQueryThree_default_instance_;
class KineTest;
struct KineTestDefaultTypeInternal;
extern KineTestDefaultTypeInternal _KineTest_default_instance_;
class QueryGenericRow;
struct QueryGenericRowDefaultTypeInternal;
extern QueryGenericRowDefaultTypeInternal _QueryGenericRow_default_instance_;
class ResponseDispose;
struct ResponseDisposeDefaultTypeInternal;
extern ResponseDisposeDefaultTypeInternal _ResponseDispose_default_instance_;
class ResponseMassDisposeCompaction;
struct ResponseMassDisposeCompactionDefaultTypeInternal;
extern ResponseMassDisposeCompactionDefaultTypeInternal _ResponseMassDisposeCompaction_default_instance_;
class ResponsePublish;
struct ResponsePublishDefaultTypeInternal;
extern ResponsePublishDefaultTypeInternal _ResponsePublish_default_instance_;
class ResponseQueryCompactRevision;
struct ResponseQueryCompactRevisionDefaultTypeInternal;
extern ResponseQueryCompactRevisionDefaultTypeInternal _ResponseQueryCompactRevision_default_instance_;
class ResponseQueryGeneric;
struct ResponseQueryGenericDefaultTypeInternal;
extern ResponseQueryGenericDefaultTypeInternal _ResponseQueryGeneric_default_instance_;
class ResponseQueryMaximumId;
struct ResponseQueryMaximumIdDefaultTypeInternal;
extern ResponseQueryMaximumIdDefaultTypeInternal _ResponseQueryMaximumId_default_instance_;
class ResponseQueryThree;
struct ResponseQueryThreeDefaultTypeInternal;
extern ResponseQueryThreeDefaultTypeInternal _ResponseQueryThree_default_instance_;
class ResponseTest;
struct ResponseTestDefaultTypeInternal;
extern ResponseTestDefaultTypeInternal _ResponseTest_default_instance_;
}  // namespace MessageStructures
PROTOBUF_NAMESPACE_OPEN
template <>
::MessageStructures::KineDispose* Arena::CreateMaybeMessage<::MessageStructures::KineDispose>(Arena*);
template <>
::MessageStructures::KineInsert* Arena::CreateMaybeMessage<::MessageStructures::KineInsert>(Arena*);
template <>
::MessageStructures::KineMassDisposeCompaction* Arena::CreateMaybeMessage<::MessageStructures::KineMassDisposeCompaction>(Arena*);
template <>
::MessageStructures::KineQueryCompactRevision* Arena::CreateMaybeMessage<::MessageStructures::KineQueryCompactRevision>(Arena*);
template <>
::MessageStructures::KineQueryGeneric* Arena::CreateMaybeMessage<::MessageStructures::KineQueryGeneric>(Arena*);
template <>
::MessageStructures::KineQueryMaximumId* Arena::CreateMaybeMessage<::MessageStructures::KineQueryMaximumId>(Arena*);
template <>
::MessageStructures::KineQueryThree* Arena::CreateMaybeMessage<::MessageStructures::KineQueryThree>(Arena*);
template <>
::MessageStructures::KineTest* Arena::CreateMaybeMessage<::MessageStructures::KineTest>(Arena*);
template <>
::MessageStructures::QueryGenericRow* Arena::CreateMaybeMessage<::MessageStructures::QueryGenericRow>(Arena*);
template <>
::MessageStructures::ResponseDispose* Arena::CreateMaybeMessage<::MessageStructures::ResponseDispose>(Arena*);
template <>
::MessageStructures::ResponseMassDisposeCompaction* Arena::CreateMaybeMessage<::MessageStructures::ResponseMassDisposeCompaction>(Arena*);
template <>
::MessageStructures::ResponsePublish* Arena::CreateMaybeMessage<::MessageStructures::ResponsePublish>(Arena*);
template <>
::MessageStructures::ResponseQueryCompactRevision* Arena::CreateMaybeMessage<::MessageStructures::ResponseQueryCompactRevision>(Arena*);
template <>
::MessageStructures::ResponseQueryGeneric* Arena::CreateMaybeMessage<::MessageStructures::ResponseQueryGeneric>(Arena*);
template <>
::MessageStructures::ResponseQueryMaximumId* Arena::CreateMaybeMessage<::MessageStructures::ResponseQueryMaximumId>(Arena*);
template <>
::MessageStructures::ResponseQueryThree* Arena::CreateMaybeMessage<::MessageStructures::ResponseQueryThree>(Arena*);
template <>
::MessageStructures::ResponseTest* Arena::CreateMaybeMessage<::MessageStructures::ResponseTest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace MessageStructures {

// ===================================================================


// -------------------------------------------------------------------

class KineTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.KineTest) */ {
 public:
  inline KineTest() : KineTest(nullptr) {}
  ~KineTest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KineTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KineTest(const KineTest& from);
  KineTest(KineTest&& from) noexcept
    : KineTest() {
    *this = ::std::move(from);
  }

  inline KineTest& operator=(const KineTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KineTest& operator=(KineTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KineTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KineTest* internal_default_instance() {
    return reinterpret_cast<const KineTest*>(
               &_KineTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KineTest& a, KineTest& b) {
    a.Swap(&b);
  }
  inline void Swap(KineTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KineTest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KineTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KineTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KineTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KineTest& from) {
    KineTest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KineTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.KineTest";
  }
  protected:
  explicit KineTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kTestidFieldNumber = 1,
  };
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* ptr);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // int64 testid = 1;
  void clear_testid() ;
  ::int64_t testid() const;
  void set_testid(::int64_t value);

  private:
  ::int64_t _internal_testid() const;
  void _internal_set_testid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MessageStructures.KineTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::int64_t testid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class ResponseTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.ResponseTest) */ {
 public:
  inline ResponseTest() : ResponseTest(nullptr) {}
  ~ResponseTest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseTest(const ResponseTest& from);
  ResponseTest(ResponseTest&& from) noexcept
    : ResponseTest() {
    *this = ::std::move(from);
  }

  inline ResponseTest& operator=(const ResponseTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseTest& operator=(ResponseTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseTest* internal_default_instance() {
    return reinterpret_cast<const ResponseTest*>(
               &_ResponseTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseTest& a, ResponseTest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseTest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseTest& from) {
    ResponseTest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.ResponseTest";
  }
  protected:
  explicit ResponseTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kResponseidFieldNumber = 1,
  };
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* ptr);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // int64 responseid = 1;
  void clear_responseid() ;
  ::int64_t responseid() const;
  void set_responseid(::int64_t value);

  private:
  ::int64_t _internal_responseid() const;
  void _internal_set_responseid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MessageStructures.ResponseTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::int64_t responseid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class KineInsert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.KineInsert) */ {
 public:
  inline KineInsert() : KineInsert(nullptr) {}
  ~KineInsert() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KineInsert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KineInsert(const KineInsert& from);
  KineInsert(KineInsert&& from) noexcept
    : KineInsert() {
    *this = ::std::move(from);
  }

  inline KineInsert& operator=(const KineInsert& from) {
    CopyFrom(from);
    return *this;
  }
  inline KineInsert& operator=(KineInsert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KineInsert& default_instance() {
    return *internal_default_instance();
  }
  static inline const KineInsert* internal_default_instance() {
    return reinterpret_cast<const KineInsert*>(
               &_KineInsert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KineInsert& a, KineInsert& b) {
    a.Swap(&b);
  }
  inline void Swap(KineInsert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KineInsert* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KineInsert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KineInsert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KineInsert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KineInsert& from) {
    KineInsert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KineInsert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.KineInsert";
  }
  protected:
  explicit KineInsert(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kValueFieldNumber = 8,
    kOldValueFieldNumber = 9,
    kIdFieldNumber = 1,
    kCreatedFieldNumber = 3,
    kDeletedFieldNumber = 4,
    kCreateRevisionFieldNumber = 5,
    kPrevRevisionFieldNumber = 6,
    kLeaseFieldNumber = 7,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bytes value = 8;
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // bytes old_value = 9;
  void clear_old_value() ;
  const std::string& old_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_old_value(Arg_&& arg, Args_... args);
  std::string* mutable_old_value();
  PROTOBUF_NODISCARD std::string* release_old_value();
  void set_allocated_old_value(std::string* ptr);

  private:
  const std::string& _internal_old_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_value(
      const std::string& value);
  std::string* _internal_mutable_old_value();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int64 created = 3;
  void clear_created() ;
  ::int64_t created() const;
  void set_created(::int64_t value);

  private:
  ::int64_t _internal_created() const;
  void _internal_set_created(::int64_t value);

  public:
  // int64 deleted = 4;
  void clear_deleted() ;
  ::int64_t deleted() const;
  void set_deleted(::int64_t value);

  private:
  ::int64_t _internal_deleted() const;
  void _internal_set_deleted(::int64_t value);

  public:
  // int64 create_revision = 5;
  void clear_create_revision() ;
  ::int64_t create_revision() const;
  void set_create_revision(::int64_t value);

  private:
  ::int64_t _internal_create_revision() const;
  void _internal_set_create_revision(::int64_t value);

  public:
  // int64 prev_revision = 6;
  void clear_prev_revision() ;
  ::int64_t prev_revision() const;
  void set_prev_revision(::int64_t value);

  private:
  ::int64_t _internal_prev_revision() const;
  void _internal_set_prev_revision(::int64_t value);

  public:
  // int64 lease = 7;
  void clear_lease() ;
  ::int64_t lease() const;
  void set_lease(::int64_t value);

  private:
  ::int64_t _internal_lease() const;
  void _internal_set_lease(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MessageStructures.KineInsert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_value_;
    ::int64_t id_;
    ::int64_t created_;
    ::int64_t deleted_;
    ::int64_t create_revision_;
    ::int64_t prev_revision_;
    ::int64_t lease_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class KineDispose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.KineDispose) */ {
 public:
  inline KineDispose() : KineDispose(nullptr) {}
  ~KineDispose() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KineDispose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KineDispose(const KineDispose& from);
  KineDispose(KineDispose&& from) noexcept
    : KineDispose() {
    *this = ::std::move(from);
  }

  inline KineDispose& operator=(const KineDispose& from) {
    CopyFrom(from);
    return *this;
  }
  inline KineDispose& operator=(KineDispose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KineDispose& default_instance() {
    return *internal_default_instance();
  }
  static inline const KineDispose* internal_default_instance() {
    return reinterpret_cast<const KineDispose*>(
               &_KineDispose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KineDispose& a, KineDispose& b) {
    a.Swap(&b);
  }
  inline void Swap(KineDispose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KineDispose* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KineDispose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KineDispose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KineDispose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KineDispose& from) {
    KineDispose::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KineDispose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.KineDispose";
  }
  protected:
  explicit KineDispose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MessageStructures.KineDispose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class KineMassDisposeCompaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.KineMassDisposeCompaction) */ {
 public:
  inline KineMassDisposeCompaction() : KineMassDisposeCompaction(nullptr) {}
  ~KineMassDisposeCompaction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KineMassDisposeCompaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KineMassDisposeCompaction(const KineMassDisposeCompaction& from);
  KineMassDisposeCompaction(KineMassDisposeCompaction&& from) noexcept
    : KineMassDisposeCompaction() {
    *this = ::std::move(from);
  }

  inline KineMassDisposeCompaction& operator=(const KineMassDisposeCompaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline KineMassDisposeCompaction& operator=(KineMassDisposeCompaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KineMassDisposeCompaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const KineMassDisposeCompaction* internal_default_instance() {
    return reinterpret_cast<const KineMassDisposeCompaction*>(
               &_KineMassDisposeCompaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KineMassDisposeCompaction& a, KineMassDisposeCompaction& b) {
    a.Swap(&b);
  }
  inline void Swap(KineMassDisposeCompaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KineMassDisposeCompaction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KineMassDisposeCompaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KineMassDisposeCompaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KineMassDisposeCompaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KineMassDisposeCompaction& from) {
    KineMassDisposeCompaction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KineMassDisposeCompaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.KineMassDisposeCompaction";
  }
  protected:
  explicit KineMassDisposeCompaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParam1FieldNumber = 1,
    kParam2FieldNumber = 2,
  };
  // int64 param1 = 1;
  void clear_param1() ;
  ::int64_t param1() const;
  void set_param1(::int64_t value);

  private:
  ::int64_t _internal_param1() const;
  void _internal_set_param1(::int64_t value);

  public:
  // int64 param2 = 2;
  void clear_param2() ;
  ::int64_t param2() const;
  void set_param2(::int64_t value);

  private:
  ::int64_t _internal_param2() const;
  void _internal_set_param2(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MessageStructures.KineMassDisposeCompaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t param1_;
    ::int64_t param2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class KineQueryGeneric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.KineQueryGeneric) */ {
 public:
  inline KineQueryGeneric() : KineQueryGeneric(nullptr) {}
  ~KineQueryGeneric() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KineQueryGeneric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KineQueryGeneric(const KineQueryGeneric& from);
  KineQueryGeneric(KineQueryGeneric&& from) noexcept
    : KineQueryGeneric() {
    *this = ::std::move(from);
  }

  inline KineQueryGeneric& operator=(const KineQueryGeneric& from) {
    CopyFrom(from);
    return *this;
  }
  inline KineQueryGeneric& operator=(KineQueryGeneric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KineQueryGeneric& default_instance() {
    return *internal_default_instance();
  }
  static inline const KineQueryGeneric* internal_default_instance() {
    return reinterpret_cast<const KineQueryGeneric*>(
               &_KineQueryGeneric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(KineQueryGeneric& a, KineQueryGeneric& b) {
    a.Swap(&b);
  }
  inline void Swap(KineQueryGeneric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KineQueryGeneric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KineQueryGeneric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KineQueryGeneric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KineQueryGeneric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KineQueryGeneric& from) {
    KineQueryGeneric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KineQueryGeneric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.KineQueryGeneric";
  }
  protected:
  explicit KineQueryGeneric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParam1FieldNumber = 2,
    kParam2FieldNumber = 3,
    kParam3FieldNumber = 4,
    kParam4FieldNumber = 5,
    kParam5FieldNumber = 6,
    kLimitFieldNumber = 7,
    kQueryIdentifierFieldNumber = 1,
  };
  // string param1 = 2;
  void clear_param1() ;
  const std::string& param1() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_param1(Arg_&& arg, Args_... args);
  std::string* mutable_param1();
  PROTOBUF_NODISCARD std::string* release_param1();
  void set_allocated_param1(std::string* ptr);

  private:
  const std::string& _internal_param1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param1(
      const std::string& value);
  std::string* _internal_mutable_param1();

  public:
  // string param2 = 3;
  void clear_param2() ;
  const std::string& param2() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_param2(Arg_&& arg, Args_... args);
  std::string* mutable_param2();
  PROTOBUF_NODISCARD std::string* release_param2();
  void set_allocated_param2(std::string* ptr);

  private:
  const std::string& _internal_param2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param2(
      const std::string& value);
  std::string* _internal_mutable_param2();

  public:
  // string param3 = 4;
  void clear_param3() ;
  const std::string& param3() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_param3(Arg_&& arg, Args_... args);
  std::string* mutable_param3();
  PROTOBUF_NODISCARD std::string* release_param3();
  void set_allocated_param3(std::string* ptr);

  private:
  const std::string& _internal_param3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param3(
      const std::string& value);
  std::string* _internal_mutable_param3();

  public:
  // string param4 = 5;
  void clear_param4() ;
  const std::string& param4() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_param4(Arg_&& arg, Args_... args);
  std::string* mutable_param4();
  PROTOBUF_NODISCARD std::string* release_param4();
  void set_allocated_param4(std::string* ptr);

  private:
  const std::string& _internal_param4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param4(
      const std::string& value);
  std::string* _internal_mutable_param4();

  public:
  // string param5 = 6;
  void clear_param5() ;
  const std::string& param5() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_param5(Arg_&& arg, Args_... args);
  std::string* mutable_param5();
  PROTOBUF_NODISCARD std::string* release_param5();
  void set_allocated_param5(std::string* ptr);

  private:
  const std::string& _internal_param5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param5(
      const std::string& value);
  std::string* _internal_mutable_param5();

  public:
  // sint64 limit = 7;
  void clear_limit() ;
  ::int64_t limit() const;
  void set_limit(::int64_t value);

  private:
  ::int64_t _internal_limit() const;
  void _internal_set_limit(::int64_t value);

  public:
  // int32 query_identifier = 1;
  void clear_query_identifier() ;
  ::int32_t query_identifier() const;
  void set_query_identifier(::int32_t value);

  private:
  ::int32_t _internal_query_identifier() const;
  void _internal_set_query_identifier(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MessageStructures.KineQueryGeneric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param4_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param5_;
    ::int64_t limit_;
    ::int32_t query_identifier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class KineQueryThree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.KineQueryThree) */ {
 public:
  inline KineQueryThree() : KineQueryThree(nullptr) {}
  ~KineQueryThree() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KineQueryThree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KineQueryThree(const KineQueryThree& from);
  KineQueryThree(KineQueryThree&& from) noexcept
    : KineQueryThree() {
    *this = ::std::move(from);
  }

  inline KineQueryThree& operator=(const KineQueryThree& from) {
    CopyFrom(from);
    return *this;
  }
  inline KineQueryThree& operator=(KineQueryThree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KineQueryThree& default_instance() {
    return *internal_default_instance();
  }
  static inline const KineQueryThree* internal_default_instance() {
    return reinterpret_cast<const KineQueryThree*>(
               &_KineQueryThree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(KineQueryThree& a, KineQueryThree& b) {
    a.Swap(&b);
  }
  inline void Swap(KineQueryThree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KineQueryThree* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KineQueryThree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KineQueryThree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KineQueryThree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KineQueryThree& from) {
    KineQueryThree::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KineQueryThree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.KineQueryThree";
  }
  protected:
  explicit KineQueryThree(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParam1FieldNumber = 1,
    kParam2FieldNumber = 2,
  };
  // string param1 = 1;
  void clear_param1() ;
  const std::string& param1() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_param1(Arg_&& arg, Args_... args);
  std::string* mutable_param1();
  PROTOBUF_NODISCARD std::string* release_param1();
  void set_allocated_param1(std::string* ptr);

  private:
  const std::string& _internal_param1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param1(
      const std::string& value);
  std::string* _internal_mutable_param1();

  public:
  // string param2 = 2;
  void clear_param2() ;
  const std::string& param2() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_param2(Arg_&& arg, Args_... args);
  std::string* mutable_param2();
  PROTOBUF_NODISCARD std::string* release_param2();
  void set_allocated_param2(std::string* ptr);

  private:
  const std::string& _internal_param2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param2(
      const std::string& value);
  std::string* _internal_mutable_param2();

  public:
  // @@protoc_insertion_point(class_scope:MessageStructures.KineQueryThree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class KineQueryCompactRevision final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:MessageStructures.KineQueryCompactRevision) */ {
 public:
  inline KineQueryCompactRevision() : KineQueryCompactRevision(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KineQueryCompactRevision(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KineQueryCompactRevision(const KineQueryCompactRevision& from);
  KineQueryCompactRevision(KineQueryCompactRevision&& from) noexcept
    : KineQueryCompactRevision() {
    *this = ::std::move(from);
  }

  inline KineQueryCompactRevision& operator=(const KineQueryCompactRevision& from) {
    CopyFrom(from);
    return *this;
  }
  inline KineQueryCompactRevision& operator=(KineQueryCompactRevision&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KineQueryCompactRevision& default_instance() {
    return *internal_default_instance();
  }
  static inline const KineQueryCompactRevision* internal_default_instance() {
    return reinterpret_cast<const KineQueryCompactRevision*>(
               &_KineQueryCompactRevision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(KineQueryCompactRevision& a, KineQueryCompactRevision& b) {
    a.Swap(&b);
  }
  inline void Swap(KineQueryCompactRevision* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KineQueryCompactRevision* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KineQueryCompactRevision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KineQueryCompactRevision>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const KineQueryCompactRevision& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const KineQueryCompactRevision& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.KineQueryCompactRevision";
  }
  protected:
  explicit KineQueryCompactRevision(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MessageStructures.KineQueryCompactRevision)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class KineQueryMaximumId final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:MessageStructures.KineQueryMaximumId) */ {
 public:
  inline KineQueryMaximumId() : KineQueryMaximumId(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KineQueryMaximumId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KineQueryMaximumId(const KineQueryMaximumId& from);
  KineQueryMaximumId(KineQueryMaximumId&& from) noexcept
    : KineQueryMaximumId() {
    *this = ::std::move(from);
  }

  inline KineQueryMaximumId& operator=(const KineQueryMaximumId& from) {
    CopyFrom(from);
    return *this;
  }
  inline KineQueryMaximumId& operator=(KineQueryMaximumId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KineQueryMaximumId& default_instance() {
    return *internal_default_instance();
  }
  static inline const KineQueryMaximumId* internal_default_instance() {
    return reinterpret_cast<const KineQueryMaximumId*>(
               &_KineQueryMaximumId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(KineQueryMaximumId& a, KineQueryMaximumId& b) {
    a.Swap(&b);
  }
  inline void Swap(KineQueryMaximumId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KineQueryMaximumId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KineQueryMaximumId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KineQueryMaximumId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const KineQueryMaximumId& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const KineQueryMaximumId& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.KineQueryMaximumId";
  }
  protected:
  explicit KineQueryMaximumId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MessageStructures.KineQueryMaximumId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class ResponsePublish final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.ResponsePublish) */ {
 public:
  inline ResponsePublish() : ResponsePublish(nullptr) {}
  ~ResponsePublish() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponsePublish(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponsePublish(const ResponsePublish& from);
  ResponsePublish(ResponsePublish&& from) noexcept
    : ResponsePublish() {
    *this = ::std::move(from);
  }

  inline ResponsePublish& operator=(const ResponsePublish& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsePublish& operator=(ResponsePublish&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponsePublish& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponsePublish* internal_default_instance() {
    return reinterpret_cast<const ResponsePublish*>(
               &_ResponsePublish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ResponsePublish& a, ResponsePublish& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponsePublish* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsePublish* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponsePublish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponsePublish>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponsePublish& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponsePublish& from) {
    ResponsePublish::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponsePublish* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.ResponsePublish";
  }
  protected:
  explicit ResponsePublish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturningIdFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // optional int64 returning_id = 2;
  bool has_returning_id() const;
  void clear_returning_id() ;
  ::int64_t returning_id() const;
  void set_returning_id(::int64_t value);

  private:
  ::int64_t _internal_returning_id() const;
  void _internal_set_returning_id(::int64_t value);

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:MessageStructures.ResponsePublish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t returning_id_;
    bool success_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class ResponseDispose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.ResponseDispose) */ {
 public:
  inline ResponseDispose() : ResponseDispose(nullptr) {}
  ~ResponseDispose() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseDispose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseDispose(const ResponseDispose& from);
  ResponseDispose(ResponseDispose&& from) noexcept
    : ResponseDispose() {
    *this = ::std::move(from);
  }

  inline ResponseDispose& operator=(const ResponseDispose& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseDispose& operator=(ResponseDispose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseDispose& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseDispose* internal_default_instance() {
    return reinterpret_cast<const ResponseDispose*>(
               &_ResponseDispose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ResponseDispose& a, ResponseDispose& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseDispose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseDispose* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseDispose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseDispose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseDispose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseDispose& from) {
    ResponseDispose::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseDispose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.ResponseDispose";
  }
  protected:
  explicit ResponseDispose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:MessageStructures.ResponseDispose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class ResponseMassDisposeCompaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.ResponseMassDisposeCompaction) */ {
 public:
  inline ResponseMassDisposeCompaction() : ResponseMassDisposeCompaction(nullptr) {}
  ~ResponseMassDisposeCompaction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseMassDisposeCompaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseMassDisposeCompaction(const ResponseMassDisposeCompaction& from);
  ResponseMassDisposeCompaction(ResponseMassDisposeCompaction&& from) noexcept
    : ResponseMassDisposeCompaction() {
    *this = ::std::move(from);
  }

  inline ResponseMassDisposeCompaction& operator=(const ResponseMassDisposeCompaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMassDisposeCompaction& operator=(ResponseMassDisposeCompaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseMassDisposeCompaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseMassDisposeCompaction* internal_default_instance() {
    return reinterpret_cast<const ResponseMassDisposeCompaction*>(
               &_ResponseMassDisposeCompaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ResponseMassDisposeCompaction& a, ResponseMassDisposeCompaction& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMassDisposeCompaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseMassDisposeCompaction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseMassDisposeCompaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseMassDisposeCompaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseMassDisposeCompaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseMassDisposeCompaction& from) {
    ResponseMassDisposeCompaction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMassDisposeCompaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.ResponseMassDisposeCompaction";
  }
  protected:
  explicit ResponseMassDisposeCompaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletedRowsFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // int64 deleted_rows = 2;
  void clear_deleted_rows() ;
  ::int64_t deleted_rows() const;
  void set_deleted_rows(::int64_t value);

  private:
  ::int64_t _internal_deleted_rows() const;
  void _internal_set_deleted_rows(::int64_t value);

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:MessageStructures.ResponseMassDisposeCompaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t deleted_rows_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class QueryGenericRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.QueryGenericRow) */ {
 public:
  inline QueryGenericRow() : QueryGenericRow(nullptr) {}
  ~QueryGenericRow() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGenericRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGenericRow(const QueryGenericRow& from);
  QueryGenericRow(QueryGenericRow&& from) noexcept
    : QueryGenericRow() {
    *this = ::std::move(from);
  }

  inline QueryGenericRow& operator=(const QueryGenericRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGenericRow& operator=(QueryGenericRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGenericRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGenericRow* internal_default_instance() {
    return reinterpret_cast<const QueryGenericRow*>(
               &_QueryGenericRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryGenericRow& a, QueryGenericRow& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGenericRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGenericRow* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGenericRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGenericRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGenericRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGenericRow& from) {
    QueryGenericRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGenericRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.QueryGenericRow";
  }
  protected:
  explicit QueryGenericRow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kValueFieldNumber = 10,
    kOldValueFieldNumber = 11,
    kMaxIdFieldNumber = 1,
    kCompactionPrevRevisionFieldNumber = 2,
    kTheidFieldNumber = 3,
    kCreatedFieldNumber = 5,
    kDeletedFieldNumber = 6,
    kCreateRevisionFieldNumber = 7,
    kPrevRevisionFieldNumber = 8,
    kLeaseFieldNumber = 9,
  };
  // string name = 4;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bytes value = 10;
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // bytes old_value = 11;
  void clear_old_value() ;
  const std::string& old_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_old_value(Arg_&& arg, Args_... args);
  std::string* mutable_old_value();
  PROTOBUF_NODISCARD std::string* release_old_value();
  void set_allocated_old_value(std::string* ptr);

  private:
  const std::string& _internal_old_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_value(
      const std::string& value);
  std::string* _internal_mutable_old_value();

  public:
  // int64 max_id = 1;
  void clear_max_id() ;
  ::int64_t max_id() const;
  void set_max_id(::int64_t value);

  private:
  ::int64_t _internal_max_id() const;
  void _internal_set_max_id(::int64_t value);

  public:
  // int64 compaction_prev_revision = 2;
  void clear_compaction_prev_revision() ;
  ::int64_t compaction_prev_revision() const;
  void set_compaction_prev_revision(::int64_t value);

  private:
  ::int64_t _internal_compaction_prev_revision() const;
  void _internal_set_compaction_prev_revision(::int64_t value);

  public:
  // int64 theid = 3;
  void clear_theid() ;
  ::int64_t theid() const;
  void set_theid(::int64_t value);

  private:
  ::int64_t _internal_theid() const;
  void _internal_set_theid(::int64_t value);

  public:
  // int64 created = 5;
  void clear_created() ;
  ::int64_t created() const;
  void set_created(::int64_t value);

  private:
  ::int64_t _internal_created() const;
  void _internal_set_created(::int64_t value);

  public:
  // int64 deleted = 6;
  void clear_deleted() ;
  ::int64_t deleted() const;
  void set_deleted(::int64_t value);

  private:
  ::int64_t _internal_deleted() const;
  void _internal_set_deleted(::int64_t value);

  public:
  // int64 create_revision = 7;
  void clear_create_revision() ;
  ::int64_t create_revision() const;
  void set_create_revision(::int64_t value);

  private:
  ::int64_t _internal_create_revision() const;
  void _internal_set_create_revision(::int64_t value);

  public:
  // int64 prev_revision = 8;
  void clear_prev_revision() ;
  ::int64_t prev_revision() const;
  void set_prev_revision(::int64_t value);

  private:
  ::int64_t _internal_prev_revision() const;
  void _internal_set_prev_revision(::int64_t value);

  public:
  // int64 lease = 9;
  void clear_lease() ;
  ::int64_t lease() const;
  void set_lease(::int64_t value);

  private:
  ::int64_t _internal_lease() const;
  void _internal_set_lease(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MessageStructures.QueryGenericRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_value_;
    ::int64_t max_id_;
    ::int64_t compaction_prev_revision_;
    ::int64_t theid_;
    ::int64_t created_;
    ::int64_t deleted_;
    ::int64_t create_revision_;
    ::int64_t prev_revision_;
    ::int64_t lease_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class ResponseQueryGeneric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.ResponseQueryGeneric) */ {
 public:
  inline ResponseQueryGeneric() : ResponseQueryGeneric(nullptr) {}
  ~ResponseQueryGeneric() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseQueryGeneric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseQueryGeneric(const ResponseQueryGeneric& from);
  ResponseQueryGeneric(ResponseQueryGeneric&& from) noexcept
    : ResponseQueryGeneric() {
    *this = ::std::move(from);
  }

  inline ResponseQueryGeneric& operator=(const ResponseQueryGeneric& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseQueryGeneric& operator=(ResponseQueryGeneric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseQueryGeneric& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseQueryGeneric* internal_default_instance() {
    return reinterpret_cast<const ResponseQueryGeneric*>(
               &_ResponseQueryGeneric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ResponseQueryGeneric& a, ResponseQueryGeneric& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseQueryGeneric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseQueryGeneric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseQueryGeneric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseQueryGeneric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseQueryGeneric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseQueryGeneric& from) {
    ResponseQueryGeneric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseQueryGeneric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.ResponseQueryGeneric";
  }
  protected:
  explicit ResponseQueryGeneric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
  };
  // repeated .MessageStructures.QueryGenericRow row = 1;
  int row_size() const;
  private:
  int _internal_row_size() const;

  public:
  void clear_row() ;
  ::MessageStructures::QueryGenericRow* mutable_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageStructures::QueryGenericRow >*
      mutable_row();
  private:
  const ::MessageStructures::QueryGenericRow& _internal_row(int index) const;
  ::MessageStructures::QueryGenericRow* _internal_add_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::MessageStructures::QueryGenericRow>& _internal_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::MessageStructures::QueryGenericRow>* _internal_mutable_row();
  public:
  const ::MessageStructures::QueryGenericRow& row(int index) const;
  ::MessageStructures::QueryGenericRow* add_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageStructures::QueryGenericRow >&
      row() const;
  // @@protoc_insertion_point(class_scope:MessageStructures.ResponseQueryGeneric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageStructures::QueryGenericRow > row_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class ResponseQueryThree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.ResponseQueryThree) */ {
 public:
  inline ResponseQueryThree() : ResponseQueryThree(nullptr) {}
  ~ResponseQueryThree() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseQueryThree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseQueryThree(const ResponseQueryThree& from);
  ResponseQueryThree(ResponseQueryThree&& from) noexcept
    : ResponseQueryThree() {
    *this = ::std::move(from);
  }

  inline ResponseQueryThree& operator=(const ResponseQueryThree& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseQueryThree& operator=(ResponseQueryThree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseQueryThree& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseQueryThree* internal_default_instance() {
    return reinterpret_cast<const ResponseQueryThree*>(
               &_ResponseQueryThree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ResponseQueryThree& a, ResponseQueryThree& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseQueryThree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseQueryThree* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseQueryThree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseQueryThree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseQueryThree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseQueryThree& from) {
    ResponseQueryThree::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseQueryThree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.ResponseQueryThree";
  }
  protected:
  explicit ResponseQueryThree(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int64 count = 2;
  void clear_count() ;
  ::int64_t count() const;
  void set_count(::int64_t value);

  private:
  ::int64_t _internal_count() const;
  void _internal_set_count(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MessageStructures.ResponseQueryThree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t id_;
    ::int64_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class ResponseQueryCompactRevision final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.ResponseQueryCompactRevision) */ {
 public:
  inline ResponseQueryCompactRevision() : ResponseQueryCompactRevision(nullptr) {}
  ~ResponseQueryCompactRevision() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseQueryCompactRevision(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseQueryCompactRevision(const ResponseQueryCompactRevision& from);
  ResponseQueryCompactRevision(ResponseQueryCompactRevision&& from) noexcept
    : ResponseQueryCompactRevision() {
    *this = ::std::move(from);
  }

  inline ResponseQueryCompactRevision& operator=(const ResponseQueryCompactRevision& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseQueryCompactRevision& operator=(ResponseQueryCompactRevision&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseQueryCompactRevision& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseQueryCompactRevision* internal_default_instance() {
    return reinterpret_cast<const ResponseQueryCompactRevision*>(
               &_ResponseQueryCompactRevision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ResponseQueryCompactRevision& a, ResponseQueryCompactRevision& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseQueryCompactRevision* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseQueryCompactRevision* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseQueryCompactRevision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseQueryCompactRevision>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseQueryCompactRevision& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseQueryCompactRevision& from) {
    ResponseQueryCompactRevision::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseQueryCompactRevision* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.ResponseQueryCompactRevision";
  }
  protected:
  explicit ResponseQueryCompactRevision(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MessageStructures.ResponseQueryCompactRevision)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};// -------------------------------------------------------------------

class ResponseQueryMaximumId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageStructures.ResponseQueryMaximumId) */ {
 public:
  inline ResponseQueryMaximumId() : ResponseQueryMaximumId(nullptr) {}
  ~ResponseQueryMaximumId() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseQueryMaximumId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseQueryMaximumId(const ResponseQueryMaximumId& from);
  ResponseQueryMaximumId(ResponseQueryMaximumId&& from) noexcept
    : ResponseQueryMaximumId() {
    *this = ::std::move(from);
  }

  inline ResponseQueryMaximumId& operator=(const ResponseQueryMaximumId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseQueryMaximumId& operator=(ResponseQueryMaximumId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseQueryMaximumId& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseQueryMaximumId* internal_default_instance() {
    return reinterpret_cast<const ResponseQueryMaximumId*>(
               &_ResponseQueryMaximumId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ResponseQueryMaximumId& a, ResponseQueryMaximumId& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseQueryMaximumId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseQueryMaximumId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseQueryMaximumId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseQueryMaximumId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseQueryMaximumId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseQueryMaximumId& from) {
    ResponseQueryMaximumId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseQueryMaximumId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageStructures.ResponseQueryMaximumId";
  }
  protected:
  explicit ResponseQueryMaximumId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:MessageStructures.ResponseQueryMaximumId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Communication_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// KineTest

// int64 testid = 1;
inline void KineTest::clear_testid() {
  _impl_.testid_ = ::int64_t{0};
}
inline ::int64_t KineTest::testid() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineTest.testid)
  return _internal_testid();
}
inline void KineTest::set_testid(::int64_t value) {
  _internal_set_testid(value);
  // @@protoc_insertion_point(field_set:MessageStructures.KineTest.testid)
}
inline ::int64_t KineTest::_internal_testid() const {
  return _impl_.testid_;
}
inline void KineTest::_internal_set_testid(::int64_t value) {
  ;
  _impl_.testid_ = value;
}

// string content = 2;
inline void KineTest::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& KineTest::content() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineTest.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KineTest::set_content(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.KineTest.content)
}
inline std::string* KineTest::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:MessageStructures.KineTest.content)
  return _s;
}
inline const std::string& KineTest::_internal_content() const {
  return _impl_.content_.Get();
}
inline void KineTest::_internal_set_content(const std::string& value) {
  ;


  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* KineTest::_internal_mutable_content() {
  ;
  return _impl_.content_.Mutable( GetArenaForAllocation());
}
inline std::string* KineTest::release_content() {
  // @@protoc_insertion_point(field_release:MessageStructures.KineTest.content)
  return _impl_.content_.Release();
}
inline void KineTest::set_allocated_content(std::string* value) {
  _impl_.content_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.KineTest.content)
}

// -------------------------------------------------------------------

// ResponseTest

// int64 responseid = 1;
inline void ResponseTest::clear_responseid() {
  _impl_.responseid_ = ::int64_t{0};
}
inline ::int64_t ResponseTest::responseid() const {
  // @@protoc_insertion_point(field_get:MessageStructures.ResponseTest.responseid)
  return _internal_responseid();
}
inline void ResponseTest::set_responseid(::int64_t value) {
  _internal_set_responseid(value);
  // @@protoc_insertion_point(field_set:MessageStructures.ResponseTest.responseid)
}
inline ::int64_t ResponseTest::_internal_responseid() const {
  return _impl_.responseid_;
}
inline void ResponseTest::_internal_set_responseid(::int64_t value) {
  ;
  _impl_.responseid_ = value;
}

// string content = 2;
inline void ResponseTest::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ResponseTest::content() const {
  // @@protoc_insertion_point(field_get:MessageStructures.ResponseTest.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseTest::set_content(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.ResponseTest.content)
}
inline std::string* ResponseTest::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:MessageStructures.ResponseTest.content)
  return _s;
}
inline const std::string& ResponseTest::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ResponseTest::_internal_set_content(const std::string& value) {
  ;


  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ResponseTest::_internal_mutable_content() {
  ;
  return _impl_.content_.Mutable( GetArenaForAllocation());
}
inline std::string* ResponseTest::release_content() {
  // @@protoc_insertion_point(field_release:MessageStructures.ResponseTest.content)
  return _impl_.content_.Release();
}
inline void ResponseTest::set_allocated_content(std::string* value) {
  _impl_.content_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.ResponseTest.content)
}

// -------------------------------------------------------------------

// KineInsert

// int64 id = 1;
inline void KineInsert::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t KineInsert::id() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineInsert.id)
  return _internal_id();
}
inline void KineInsert::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MessageStructures.KineInsert.id)
}
inline ::int64_t KineInsert::_internal_id() const {
  return _impl_.id_;
}
inline void KineInsert::_internal_set_id(::int64_t value) {
  ;
  _impl_.id_ = value;
}

// string name = 2;
inline void KineInsert::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& KineInsert::name() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineInsert.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KineInsert::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.KineInsert.name)
}
inline std::string* KineInsert::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:MessageStructures.KineInsert.name)
  return _s;
}
inline const std::string& KineInsert::_internal_name() const {
  return _impl_.name_.Get();
}
inline void KineInsert::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* KineInsert::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* KineInsert::release_name() {
  // @@protoc_insertion_point(field_release:MessageStructures.KineInsert.name)
  return _impl_.name_.Release();
}
inline void KineInsert::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.KineInsert.name)
}

// int64 created = 3;
inline void KineInsert::clear_created() {
  _impl_.created_ = ::int64_t{0};
}
inline ::int64_t KineInsert::created() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineInsert.created)
  return _internal_created();
}
inline void KineInsert::set_created(::int64_t value) {
  _internal_set_created(value);
  // @@protoc_insertion_point(field_set:MessageStructures.KineInsert.created)
}
inline ::int64_t KineInsert::_internal_created() const {
  return _impl_.created_;
}
inline void KineInsert::_internal_set_created(::int64_t value) {
  ;
  _impl_.created_ = value;
}

// int64 deleted = 4;
inline void KineInsert::clear_deleted() {
  _impl_.deleted_ = ::int64_t{0};
}
inline ::int64_t KineInsert::deleted() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineInsert.deleted)
  return _internal_deleted();
}
inline void KineInsert::set_deleted(::int64_t value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:MessageStructures.KineInsert.deleted)
}
inline ::int64_t KineInsert::_internal_deleted() const {
  return _impl_.deleted_;
}
inline void KineInsert::_internal_set_deleted(::int64_t value) {
  ;
  _impl_.deleted_ = value;
}

// int64 create_revision = 5;
inline void KineInsert::clear_create_revision() {
  _impl_.create_revision_ = ::int64_t{0};
}
inline ::int64_t KineInsert::create_revision() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineInsert.create_revision)
  return _internal_create_revision();
}
inline void KineInsert::set_create_revision(::int64_t value) {
  _internal_set_create_revision(value);
  // @@protoc_insertion_point(field_set:MessageStructures.KineInsert.create_revision)
}
inline ::int64_t KineInsert::_internal_create_revision() const {
  return _impl_.create_revision_;
}
inline void KineInsert::_internal_set_create_revision(::int64_t value) {
  ;
  _impl_.create_revision_ = value;
}

// int64 prev_revision = 6;
inline void KineInsert::clear_prev_revision() {
  _impl_.prev_revision_ = ::int64_t{0};
}
inline ::int64_t KineInsert::prev_revision() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineInsert.prev_revision)
  return _internal_prev_revision();
}
inline void KineInsert::set_prev_revision(::int64_t value) {
  _internal_set_prev_revision(value);
  // @@protoc_insertion_point(field_set:MessageStructures.KineInsert.prev_revision)
}
inline ::int64_t KineInsert::_internal_prev_revision() const {
  return _impl_.prev_revision_;
}
inline void KineInsert::_internal_set_prev_revision(::int64_t value) {
  ;
  _impl_.prev_revision_ = value;
}

// int64 lease = 7;
inline void KineInsert::clear_lease() {
  _impl_.lease_ = ::int64_t{0};
}
inline ::int64_t KineInsert::lease() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineInsert.lease)
  return _internal_lease();
}
inline void KineInsert::set_lease(::int64_t value) {
  _internal_set_lease(value);
  // @@protoc_insertion_point(field_set:MessageStructures.KineInsert.lease)
}
inline ::int64_t KineInsert::_internal_lease() const {
  return _impl_.lease_;
}
inline void KineInsert::_internal_set_lease(::int64_t value) {
  ;
  _impl_.lease_ = value;
}

// bytes value = 8;
inline void KineInsert::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& KineInsert::value() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineInsert.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KineInsert::set_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.KineInsert.value)
}
inline std::string* KineInsert::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:MessageStructures.KineInsert.value)
  return _s;
}
inline const std::string& KineInsert::_internal_value() const {
  return _impl_.value_.Get();
}
inline void KineInsert::_internal_set_value(const std::string& value) {
  ;


  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* KineInsert::_internal_mutable_value() {
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* KineInsert::release_value() {
  // @@protoc_insertion_point(field_release:MessageStructures.KineInsert.value)
  return _impl_.value_.Release();
}
inline void KineInsert::set_allocated_value(std::string* value) {
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.KineInsert.value)
}

// bytes old_value = 9;
inline void KineInsert::clear_old_value() {
  _impl_.old_value_.ClearToEmpty();
}
inline const std::string& KineInsert::old_value() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineInsert.old_value)
  return _internal_old_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KineInsert::set_old_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.old_value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.KineInsert.old_value)
}
inline std::string* KineInsert::mutable_old_value() {
  std::string* _s = _internal_mutable_old_value();
  // @@protoc_insertion_point(field_mutable:MessageStructures.KineInsert.old_value)
  return _s;
}
inline const std::string& KineInsert::_internal_old_value() const {
  return _impl_.old_value_.Get();
}
inline void KineInsert::_internal_set_old_value(const std::string& value) {
  ;


  _impl_.old_value_.Set(value, GetArenaForAllocation());
}
inline std::string* KineInsert::_internal_mutable_old_value() {
  ;
  return _impl_.old_value_.Mutable( GetArenaForAllocation());
}
inline std::string* KineInsert::release_old_value() {
  // @@protoc_insertion_point(field_release:MessageStructures.KineInsert.old_value)
  return _impl_.old_value_.Release();
}
inline void KineInsert::set_allocated_old_value(std::string* value) {
  _impl_.old_value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.old_value_.IsDefault()) {
          _impl_.old_value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.KineInsert.old_value)
}

// -------------------------------------------------------------------

// KineDispose

// int64 id = 1;
inline void KineDispose::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t KineDispose::id() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineDispose.id)
  return _internal_id();
}
inline void KineDispose::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MessageStructures.KineDispose.id)
}
inline ::int64_t KineDispose::_internal_id() const {
  return _impl_.id_;
}
inline void KineDispose::_internal_set_id(::int64_t value) {
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// KineMassDisposeCompaction

// int64 param1 = 1;
inline void KineMassDisposeCompaction::clear_param1() {
  _impl_.param1_ = ::int64_t{0};
}
inline ::int64_t KineMassDisposeCompaction::param1() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineMassDisposeCompaction.param1)
  return _internal_param1();
}
inline void KineMassDisposeCompaction::set_param1(::int64_t value) {
  _internal_set_param1(value);
  // @@protoc_insertion_point(field_set:MessageStructures.KineMassDisposeCompaction.param1)
}
inline ::int64_t KineMassDisposeCompaction::_internal_param1() const {
  return _impl_.param1_;
}
inline void KineMassDisposeCompaction::_internal_set_param1(::int64_t value) {
  ;
  _impl_.param1_ = value;
}

// int64 param2 = 2;
inline void KineMassDisposeCompaction::clear_param2() {
  _impl_.param2_ = ::int64_t{0};
}
inline ::int64_t KineMassDisposeCompaction::param2() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineMassDisposeCompaction.param2)
  return _internal_param2();
}
inline void KineMassDisposeCompaction::set_param2(::int64_t value) {
  _internal_set_param2(value);
  // @@protoc_insertion_point(field_set:MessageStructures.KineMassDisposeCompaction.param2)
}
inline ::int64_t KineMassDisposeCompaction::_internal_param2() const {
  return _impl_.param2_;
}
inline void KineMassDisposeCompaction::_internal_set_param2(::int64_t value) {
  ;
  _impl_.param2_ = value;
}

// -------------------------------------------------------------------

// KineQueryGeneric

// int32 query_identifier = 1;
inline void KineQueryGeneric::clear_query_identifier() {
  _impl_.query_identifier_ = 0;
}
inline ::int32_t KineQueryGeneric::query_identifier() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineQueryGeneric.query_identifier)
  return _internal_query_identifier();
}
inline void KineQueryGeneric::set_query_identifier(::int32_t value) {
  _internal_set_query_identifier(value);
  // @@protoc_insertion_point(field_set:MessageStructures.KineQueryGeneric.query_identifier)
}
inline ::int32_t KineQueryGeneric::_internal_query_identifier() const {
  return _impl_.query_identifier_;
}
inline void KineQueryGeneric::_internal_set_query_identifier(::int32_t value) {
  ;
  _impl_.query_identifier_ = value;
}

// string param1 = 2;
inline void KineQueryGeneric::clear_param1() {
  _impl_.param1_.ClearToEmpty();
}
inline const std::string& KineQueryGeneric::param1() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineQueryGeneric.param1)
  return _internal_param1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KineQueryGeneric::set_param1(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.param1_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.KineQueryGeneric.param1)
}
inline std::string* KineQueryGeneric::mutable_param1() {
  std::string* _s = _internal_mutable_param1();
  // @@protoc_insertion_point(field_mutable:MessageStructures.KineQueryGeneric.param1)
  return _s;
}
inline const std::string& KineQueryGeneric::_internal_param1() const {
  return _impl_.param1_.Get();
}
inline void KineQueryGeneric::_internal_set_param1(const std::string& value) {
  ;


  _impl_.param1_.Set(value, GetArenaForAllocation());
}
inline std::string* KineQueryGeneric::_internal_mutable_param1() {
  ;
  return _impl_.param1_.Mutable( GetArenaForAllocation());
}
inline std::string* KineQueryGeneric::release_param1() {
  // @@protoc_insertion_point(field_release:MessageStructures.KineQueryGeneric.param1)
  return _impl_.param1_.Release();
}
inline void KineQueryGeneric::set_allocated_param1(std::string* value) {
  _impl_.param1_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.param1_.IsDefault()) {
          _impl_.param1_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.KineQueryGeneric.param1)
}

// string param2 = 3;
inline void KineQueryGeneric::clear_param2() {
  _impl_.param2_.ClearToEmpty();
}
inline const std::string& KineQueryGeneric::param2() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineQueryGeneric.param2)
  return _internal_param2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KineQueryGeneric::set_param2(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.param2_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.KineQueryGeneric.param2)
}
inline std::string* KineQueryGeneric::mutable_param2() {
  std::string* _s = _internal_mutable_param2();
  // @@protoc_insertion_point(field_mutable:MessageStructures.KineQueryGeneric.param2)
  return _s;
}
inline const std::string& KineQueryGeneric::_internal_param2() const {
  return _impl_.param2_.Get();
}
inline void KineQueryGeneric::_internal_set_param2(const std::string& value) {
  ;


  _impl_.param2_.Set(value, GetArenaForAllocation());
}
inline std::string* KineQueryGeneric::_internal_mutable_param2() {
  ;
  return _impl_.param2_.Mutable( GetArenaForAllocation());
}
inline std::string* KineQueryGeneric::release_param2() {
  // @@protoc_insertion_point(field_release:MessageStructures.KineQueryGeneric.param2)
  return _impl_.param2_.Release();
}
inline void KineQueryGeneric::set_allocated_param2(std::string* value) {
  _impl_.param2_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.param2_.IsDefault()) {
          _impl_.param2_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.KineQueryGeneric.param2)
}

// string param3 = 4;
inline void KineQueryGeneric::clear_param3() {
  _impl_.param3_.ClearToEmpty();
}
inline const std::string& KineQueryGeneric::param3() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineQueryGeneric.param3)
  return _internal_param3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KineQueryGeneric::set_param3(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.param3_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.KineQueryGeneric.param3)
}
inline std::string* KineQueryGeneric::mutable_param3() {
  std::string* _s = _internal_mutable_param3();
  // @@protoc_insertion_point(field_mutable:MessageStructures.KineQueryGeneric.param3)
  return _s;
}
inline const std::string& KineQueryGeneric::_internal_param3() const {
  return _impl_.param3_.Get();
}
inline void KineQueryGeneric::_internal_set_param3(const std::string& value) {
  ;


  _impl_.param3_.Set(value, GetArenaForAllocation());
}
inline std::string* KineQueryGeneric::_internal_mutable_param3() {
  ;
  return _impl_.param3_.Mutable( GetArenaForAllocation());
}
inline std::string* KineQueryGeneric::release_param3() {
  // @@protoc_insertion_point(field_release:MessageStructures.KineQueryGeneric.param3)
  return _impl_.param3_.Release();
}
inline void KineQueryGeneric::set_allocated_param3(std::string* value) {
  _impl_.param3_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.param3_.IsDefault()) {
          _impl_.param3_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.KineQueryGeneric.param3)
}

// string param4 = 5;
inline void KineQueryGeneric::clear_param4() {
  _impl_.param4_.ClearToEmpty();
}
inline const std::string& KineQueryGeneric::param4() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineQueryGeneric.param4)
  return _internal_param4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KineQueryGeneric::set_param4(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.param4_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.KineQueryGeneric.param4)
}
inline std::string* KineQueryGeneric::mutable_param4() {
  std::string* _s = _internal_mutable_param4();
  // @@protoc_insertion_point(field_mutable:MessageStructures.KineQueryGeneric.param4)
  return _s;
}
inline const std::string& KineQueryGeneric::_internal_param4() const {
  return _impl_.param4_.Get();
}
inline void KineQueryGeneric::_internal_set_param4(const std::string& value) {
  ;


  _impl_.param4_.Set(value, GetArenaForAllocation());
}
inline std::string* KineQueryGeneric::_internal_mutable_param4() {
  ;
  return _impl_.param4_.Mutable( GetArenaForAllocation());
}
inline std::string* KineQueryGeneric::release_param4() {
  // @@protoc_insertion_point(field_release:MessageStructures.KineQueryGeneric.param4)
  return _impl_.param4_.Release();
}
inline void KineQueryGeneric::set_allocated_param4(std::string* value) {
  _impl_.param4_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.param4_.IsDefault()) {
          _impl_.param4_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.KineQueryGeneric.param4)
}

// string param5 = 6;
inline void KineQueryGeneric::clear_param5() {
  _impl_.param5_.ClearToEmpty();
}
inline const std::string& KineQueryGeneric::param5() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineQueryGeneric.param5)
  return _internal_param5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KineQueryGeneric::set_param5(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.param5_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.KineQueryGeneric.param5)
}
inline std::string* KineQueryGeneric::mutable_param5() {
  std::string* _s = _internal_mutable_param5();
  // @@protoc_insertion_point(field_mutable:MessageStructures.KineQueryGeneric.param5)
  return _s;
}
inline const std::string& KineQueryGeneric::_internal_param5() const {
  return _impl_.param5_.Get();
}
inline void KineQueryGeneric::_internal_set_param5(const std::string& value) {
  ;


  _impl_.param5_.Set(value, GetArenaForAllocation());
}
inline std::string* KineQueryGeneric::_internal_mutable_param5() {
  ;
  return _impl_.param5_.Mutable( GetArenaForAllocation());
}
inline std::string* KineQueryGeneric::release_param5() {
  // @@protoc_insertion_point(field_release:MessageStructures.KineQueryGeneric.param5)
  return _impl_.param5_.Release();
}
inline void KineQueryGeneric::set_allocated_param5(std::string* value) {
  _impl_.param5_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.param5_.IsDefault()) {
          _impl_.param5_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.KineQueryGeneric.param5)
}

// sint64 limit = 7;
inline void KineQueryGeneric::clear_limit() {
  _impl_.limit_ = ::int64_t{0};
}
inline ::int64_t KineQueryGeneric::limit() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineQueryGeneric.limit)
  return _internal_limit();
}
inline void KineQueryGeneric::set_limit(::int64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:MessageStructures.KineQueryGeneric.limit)
}
inline ::int64_t KineQueryGeneric::_internal_limit() const {
  return _impl_.limit_;
}
inline void KineQueryGeneric::_internal_set_limit(::int64_t value) {
  ;
  _impl_.limit_ = value;
}

// -------------------------------------------------------------------

// KineQueryThree

// string param1 = 1;
inline void KineQueryThree::clear_param1() {
  _impl_.param1_.ClearToEmpty();
}
inline const std::string& KineQueryThree::param1() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineQueryThree.param1)
  return _internal_param1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KineQueryThree::set_param1(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.param1_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.KineQueryThree.param1)
}
inline std::string* KineQueryThree::mutable_param1() {
  std::string* _s = _internal_mutable_param1();
  // @@protoc_insertion_point(field_mutable:MessageStructures.KineQueryThree.param1)
  return _s;
}
inline const std::string& KineQueryThree::_internal_param1() const {
  return _impl_.param1_.Get();
}
inline void KineQueryThree::_internal_set_param1(const std::string& value) {
  ;


  _impl_.param1_.Set(value, GetArenaForAllocation());
}
inline std::string* KineQueryThree::_internal_mutable_param1() {
  ;
  return _impl_.param1_.Mutable( GetArenaForAllocation());
}
inline std::string* KineQueryThree::release_param1() {
  // @@protoc_insertion_point(field_release:MessageStructures.KineQueryThree.param1)
  return _impl_.param1_.Release();
}
inline void KineQueryThree::set_allocated_param1(std::string* value) {
  _impl_.param1_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.param1_.IsDefault()) {
          _impl_.param1_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.KineQueryThree.param1)
}

// string param2 = 2;
inline void KineQueryThree::clear_param2() {
  _impl_.param2_.ClearToEmpty();
}
inline const std::string& KineQueryThree::param2() const {
  // @@protoc_insertion_point(field_get:MessageStructures.KineQueryThree.param2)
  return _internal_param2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KineQueryThree::set_param2(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.param2_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.KineQueryThree.param2)
}
inline std::string* KineQueryThree::mutable_param2() {
  std::string* _s = _internal_mutable_param2();
  // @@protoc_insertion_point(field_mutable:MessageStructures.KineQueryThree.param2)
  return _s;
}
inline const std::string& KineQueryThree::_internal_param2() const {
  return _impl_.param2_.Get();
}
inline void KineQueryThree::_internal_set_param2(const std::string& value) {
  ;


  _impl_.param2_.Set(value, GetArenaForAllocation());
}
inline std::string* KineQueryThree::_internal_mutable_param2() {
  ;
  return _impl_.param2_.Mutable( GetArenaForAllocation());
}
inline std::string* KineQueryThree::release_param2() {
  // @@protoc_insertion_point(field_release:MessageStructures.KineQueryThree.param2)
  return _impl_.param2_.Release();
}
inline void KineQueryThree::set_allocated_param2(std::string* value) {
  _impl_.param2_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.param2_.IsDefault()) {
          _impl_.param2_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.KineQueryThree.param2)
}

// -------------------------------------------------------------------

// KineQueryCompactRevision

// -------------------------------------------------------------------

// KineQueryMaximumId

// -------------------------------------------------------------------

// ResponsePublish

// bool success = 1;
inline void ResponsePublish::clear_success() {
  _impl_.success_ = false;
}
inline bool ResponsePublish::success() const {
  // @@protoc_insertion_point(field_get:MessageStructures.ResponsePublish.success)
  return _internal_success();
}
inline void ResponsePublish::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:MessageStructures.ResponsePublish.success)
}
inline bool ResponsePublish::_internal_success() const {
  return _impl_.success_;
}
inline void ResponsePublish::_internal_set_success(bool value) {
  ;
  _impl_.success_ = value;
}

// optional int64 returning_id = 2;
inline bool ResponsePublish::has_returning_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ResponsePublish::clear_returning_id() {
  _impl_.returning_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t ResponsePublish::returning_id() const {
  // @@protoc_insertion_point(field_get:MessageStructures.ResponsePublish.returning_id)
  return _internal_returning_id();
}
inline void ResponsePublish::set_returning_id(::int64_t value) {
  _internal_set_returning_id(value);
  // @@protoc_insertion_point(field_set:MessageStructures.ResponsePublish.returning_id)
}
inline ::int64_t ResponsePublish::_internal_returning_id() const {
  return _impl_.returning_id_;
}
inline void ResponsePublish::_internal_set_returning_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.returning_id_ = value;
}

// -------------------------------------------------------------------

// ResponseDispose

// bool success = 1;
inline void ResponseDispose::clear_success() {
  _impl_.success_ = false;
}
inline bool ResponseDispose::success() const {
  // @@protoc_insertion_point(field_get:MessageStructures.ResponseDispose.success)
  return _internal_success();
}
inline void ResponseDispose::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:MessageStructures.ResponseDispose.success)
}
inline bool ResponseDispose::_internal_success() const {
  return _impl_.success_;
}
inline void ResponseDispose::_internal_set_success(bool value) {
  ;
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// ResponseMassDisposeCompaction

// bool success = 1;
inline void ResponseMassDisposeCompaction::clear_success() {
  _impl_.success_ = false;
}
inline bool ResponseMassDisposeCompaction::success() const {
  // @@protoc_insertion_point(field_get:MessageStructures.ResponseMassDisposeCompaction.success)
  return _internal_success();
}
inline void ResponseMassDisposeCompaction::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:MessageStructures.ResponseMassDisposeCompaction.success)
}
inline bool ResponseMassDisposeCompaction::_internal_success() const {
  return _impl_.success_;
}
inline void ResponseMassDisposeCompaction::_internal_set_success(bool value) {
  ;
  _impl_.success_ = value;
}

// int64 deleted_rows = 2;
inline void ResponseMassDisposeCompaction::clear_deleted_rows() {
  _impl_.deleted_rows_ = ::int64_t{0};
}
inline ::int64_t ResponseMassDisposeCompaction::deleted_rows() const {
  // @@protoc_insertion_point(field_get:MessageStructures.ResponseMassDisposeCompaction.deleted_rows)
  return _internal_deleted_rows();
}
inline void ResponseMassDisposeCompaction::set_deleted_rows(::int64_t value) {
  _internal_set_deleted_rows(value);
  // @@protoc_insertion_point(field_set:MessageStructures.ResponseMassDisposeCompaction.deleted_rows)
}
inline ::int64_t ResponseMassDisposeCompaction::_internal_deleted_rows() const {
  return _impl_.deleted_rows_;
}
inline void ResponseMassDisposeCompaction::_internal_set_deleted_rows(::int64_t value) {
  ;
  _impl_.deleted_rows_ = value;
}

// -------------------------------------------------------------------

// QueryGenericRow

// int64 max_id = 1;
inline void QueryGenericRow::clear_max_id() {
  _impl_.max_id_ = ::int64_t{0};
}
inline ::int64_t QueryGenericRow::max_id() const {
  // @@protoc_insertion_point(field_get:MessageStructures.QueryGenericRow.max_id)
  return _internal_max_id();
}
inline void QueryGenericRow::set_max_id(::int64_t value) {
  _internal_set_max_id(value);
  // @@protoc_insertion_point(field_set:MessageStructures.QueryGenericRow.max_id)
}
inline ::int64_t QueryGenericRow::_internal_max_id() const {
  return _impl_.max_id_;
}
inline void QueryGenericRow::_internal_set_max_id(::int64_t value) {
  ;
  _impl_.max_id_ = value;
}

// int64 compaction_prev_revision = 2;
inline void QueryGenericRow::clear_compaction_prev_revision() {
  _impl_.compaction_prev_revision_ = ::int64_t{0};
}
inline ::int64_t QueryGenericRow::compaction_prev_revision() const {
  // @@protoc_insertion_point(field_get:MessageStructures.QueryGenericRow.compaction_prev_revision)
  return _internal_compaction_prev_revision();
}
inline void QueryGenericRow::set_compaction_prev_revision(::int64_t value) {
  _internal_set_compaction_prev_revision(value);
  // @@protoc_insertion_point(field_set:MessageStructures.QueryGenericRow.compaction_prev_revision)
}
inline ::int64_t QueryGenericRow::_internal_compaction_prev_revision() const {
  return _impl_.compaction_prev_revision_;
}
inline void QueryGenericRow::_internal_set_compaction_prev_revision(::int64_t value) {
  ;
  _impl_.compaction_prev_revision_ = value;
}

// int64 theid = 3;
inline void QueryGenericRow::clear_theid() {
  _impl_.theid_ = ::int64_t{0};
}
inline ::int64_t QueryGenericRow::theid() const {
  // @@protoc_insertion_point(field_get:MessageStructures.QueryGenericRow.theid)
  return _internal_theid();
}
inline void QueryGenericRow::set_theid(::int64_t value) {
  _internal_set_theid(value);
  // @@protoc_insertion_point(field_set:MessageStructures.QueryGenericRow.theid)
}
inline ::int64_t QueryGenericRow::_internal_theid() const {
  return _impl_.theid_;
}
inline void QueryGenericRow::_internal_set_theid(::int64_t value) {
  ;
  _impl_.theid_ = value;
}

// string name = 4;
inline void QueryGenericRow::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& QueryGenericRow::name() const {
  // @@protoc_insertion_point(field_get:MessageStructures.QueryGenericRow.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryGenericRow::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.QueryGenericRow.name)
}
inline std::string* QueryGenericRow::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:MessageStructures.QueryGenericRow.name)
  return _s;
}
inline const std::string& QueryGenericRow::_internal_name() const {
  return _impl_.name_.Get();
}
inline void QueryGenericRow::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryGenericRow::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryGenericRow::release_name() {
  // @@protoc_insertion_point(field_release:MessageStructures.QueryGenericRow.name)
  return _impl_.name_.Release();
}
inline void QueryGenericRow::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.QueryGenericRow.name)
}

// int64 created = 5;
inline void QueryGenericRow::clear_created() {
  _impl_.created_ = ::int64_t{0};
}
inline ::int64_t QueryGenericRow::created() const {
  // @@protoc_insertion_point(field_get:MessageStructures.QueryGenericRow.created)
  return _internal_created();
}
inline void QueryGenericRow::set_created(::int64_t value) {
  _internal_set_created(value);
  // @@protoc_insertion_point(field_set:MessageStructures.QueryGenericRow.created)
}
inline ::int64_t QueryGenericRow::_internal_created() const {
  return _impl_.created_;
}
inline void QueryGenericRow::_internal_set_created(::int64_t value) {
  ;
  _impl_.created_ = value;
}

// int64 deleted = 6;
inline void QueryGenericRow::clear_deleted() {
  _impl_.deleted_ = ::int64_t{0};
}
inline ::int64_t QueryGenericRow::deleted() const {
  // @@protoc_insertion_point(field_get:MessageStructures.QueryGenericRow.deleted)
  return _internal_deleted();
}
inline void QueryGenericRow::set_deleted(::int64_t value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:MessageStructures.QueryGenericRow.deleted)
}
inline ::int64_t QueryGenericRow::_internal_deleted() const {
  return _impl_.deleted_;
}
inline void QueryGenericRow::_internal_set_deleted(::int64_t value) {
  ;
  _impl_.deleted_ = value;
}

// int64 create_revision = 7;
inline void QueryGenericRow::clear_create_revision() {
  _impl_.create_revision_ = ::int64_t{0};
}
inline ::int64_t QueryGenericRow::create_revision() const {
  // @@protoc_insertion_point(field_get:MessageStructures.QueryGenericRow.create_revision)
  return _internal_create_revision();
}
inline void QueryGenericRow::set_create_revision(::int64_t value) {
  _internal_set_create_revision(value);
  // @@protoc_insertion_point(field_set:MessageStructures.QueryGenericRow.create_revision)
}
inline ::int64_t QueryGenericRow::_internal_create_revision() const {
  return _impl_.create_revision_;
}
inline void QueryGenericRow::_internal_set_create_revision(::int64_t value) {
  ;
  _impl_.create_revision_ = value;
}

// int64 prev_revision = 8;
inline void QueryGenericRow::clear_prev_revision() {
  _impl_.prev_revision_ = ::int64_t{0};
}
inline ::int64_t QueryGenericRow::prev_revision() const {
  // @@protoc_insertion_point(field_get:MessageStructures.QueryGenericRow.prev_revision)
  return _internal_prev_revision();
}
inline void QueryGenericRow::set_prev_revision(::int64_t value) {
  _internal_set_prev_revision(value);
  // @@protoc_insertion_point(field_set:MessageStructures.QueryGenericRow.prev_revision)
}
inline ::int64_t QueryGenericRow::_internal_prev_revision() const {
  return _impl_.prev_revision_;
}
inline void QueryGenericRow::_internal_set_prev_revision(::int64_t value) {
  ;
  _impl_.prev_revision_ = value;
}

// int64 lease = 9;
inline void QueryGenericRow::clear_lease() {
  _impl_.lease_ = ::int64_t{0};
}
inline ::int64_t QueryGenericRow::lease() const {
  // @@protoc_insertion_point(field_get:MessageStructures.QueryGenericRow.lease)
  return _internal_lease();
}
inline void QueryGenericRow::set_lease(::int64_t value) {
  _internal_set_lease(value);
  // @@protoc_insertion_point(field_set:MessageStructures.QueryGenericRow.lease)
}
inline ::int64_t QueryGenericRow::_internal_lease() const {
  return _impl_.lease_;
}
inline void QueryGenericRow::_internal_set_lease(::int64_t value) {
  ;
  _impl_.lease_ = value;
}

// bytes value = 10;
inline void QueryGenericRow::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& QueryGenericRow::value() const {
  // @@protoc_insertion_point(field_get:MessageStructures.QueryGenericRow.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryGenericRow::set_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.QueryGenericRow.value)
}
inline std::string* QueryGenericRow::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:MessageStructures.QueryGenericRow.value)
  return _s;
}
inline const std::string& QueryGenericRow::_internal_value() const {
  return _impl_.value_.Get();
}
inline void QueryGenericRow::_internal_set_value(const std::string& value) {
  ;


  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryGenericRow::_internal_mutable_value() {
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryGenericRow::release_value() {
  // @@protoc_insertion_point(field_release:MessageStructures.QueryGenericRow.value)
  return _impl_.value_.Release();
}
inline void QueryGenericRow::set_allocated_value(std::string* value) {
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.QueryGenericRow.value)
}

// bytes old_value = 11;
inline void QueryGenericRow::clear_old_value() {
  _impl_.old_value_.ClearToEmpty();
}
inline const std::string& QueryGenericRow::old_value() const {
  // @@protoc_insertion_point(field_get:MessageStructures.QueryGenericRow.old_value)
  return _internal_old_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryGenericRow::set_old_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.old_value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageStructures.QueryGenericRow.old_value)
}
inline std::string* QueryGenericRow::mutable_old_value() {
  std::string* _s = _internal_mutable_old_value();
  // @@protoc_insertion_point(field_mutable:MessageStructures.QueryGenericRow.old_value)
  return _s;
}
inline const std::string& QueryGenericRow::_internal_old_value() const {
  return _impl_.old_value_.Get();
}
inline void QueryGenericRow::_internal_set_old_value(const std::string& value) {
  ;


  _impl_.old_value_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryGenericRow::_internal_mutable_old_value() {
  ;
  return _impl_.old_value_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryGenericRow::release_old_value() {
  // @@protoc_insertion_point(field_release:MessageStructures.QueryGenericRow.old_value)
  return _impl_.old_value_.Release();
}
inline void QueryGenericRow::set_allocated_old_value(std::string* value) {
  _impl_.old_value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.old_value_.IsDefault()) {
          _impl_.old_value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageStructures.QueryGenericRow.old_value)
}

// -------------------------------------------------------------------

// ResponseQueryGeneric

// repeated .MessageStructures.QueryGenericRow row = 1;
inline int ResponseQueryGeneric::_internal_row_size() const {
  return _impl_.row_.size();
}
inline int ResponseQueryGeneric::row_size() const {
  return _internal_row_size();
}
inline void ResponseQueryGeneric::clear_row() {
  _internal_mutable_row()->Clear();
}
inline ::MessageStructures::QueryGenericRow* ResponseQueryGeneric::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:MessageStructures.ResponseQueryGeneric.row)
  return _internal_mutable_row()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageStructures::QueryGenericRow >*
ResponseQueryGeneric::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:MessageStructures.ResponseQueryGeneric.row)
  return _internal_mutable_row();
}
inline const ::MessageStructures::QueryGenericRow& ResponseQueryGeneric::_internal_row(int index) const {
  return _internal_row().Get(index);
}
inline const ::MessageStructures::QueryGenericRow& ResponseQueryGeneric::row(int index) const {
  // @@protoc_insertion_point(field_get:MessageStructures.ResponseQueryGeneric.row)
  return _internal_row(index);
}
inline ::MessageStructures::QueryGenericRow* ResponseQueryGeneric::_internal_add_row() {
  return _internal_mutable_row()->Add();
}
inline ::MessageStructures::QueryGenericRow* ResponseQueryGeneric::add_row() {
  ::MessageStructures::QueryGenericRow* _add = _internal_add_row();
  // @@protoc_insertion_point(field_add:MessageStructures.ResponseQueryGeneric.row)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageStructures::QueryGenericRow >&
ResponseQueryGeneric::row() const {
  // @@protoc_insertion_point(field_list:MessageStructures.ResponseQueryGeneric.row)
  return _internal_row();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::MessageStructures::QueryGenericRow>&
ResponseQueryGeneric::_internal_row() const {
  return _impl_.row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::MessageStructures::QueryGenericRow>*
ResponseQueryGeneric::_internal_mutable_row() {
  return &_impl_.row_;
}

// -------------------------------------------------------------------

// ResponseQueryThree

// int64 id = 1;
inline void ResponseQueryThree::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t ResponseQueryThree::id() const {
  // @@protoc_insertion_point(field_get:MessageStructures.ResponseQueryThree.id)
  return _internal_id();
}
inline void ResponseQueryThree::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MessageStructures.ResponseQueryThree.id)
}
inline ::int64_t ResponseQueryThree::_internal_id() const {
  return _impl_.id_;
}
inline void ResponseQueryThree::_internal_set_id(::int64_t value) {
  ;
  _impl_.id_ = value;
}

// int64 count = 2;
inline void ResponseQueryThree::clear_count() {
  _impl_.count_ = ::int64_t{0};
}
inline ::int64_t ResponseQueryThree::count() const {
  // @@protoc_insertion_point(field_get:MessageStructures.ResponseQueryThree.count)
  return _internal_count();
}
inline void ResponseQueryThree::set_count(::int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:MessageStructures.ResponseQueryThree.count)
}
inline ::int64_t ResponseQueryThree::_internal_count() const {
  return _impl_.count_;
}
inline void ResponseQueryThree::_internal_set_count(::int64_t value) {
  ;
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// ResponseQueryCompactRevision

// int64 id = 1;
inline void ResponseQueryCompactRevision::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t ResponseQueryCompactRevision::id() const {
  // @@protoc_insertion_point(field_get:MessageStructures.ResponseQueryCompactRevision.id)
  return _internal_id();
}
inline void ResponseQueryCompactRevision::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MessageStructures.ResponseQueryCompactRevision.id)
}
inline ::int64_t ResponseQueryCompactRevision::_internal_id() const {
  return _impl_.id_;
}
inline void ResponseQueryCompactRevision::_internal_set_id(::int64_t value) {
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// ResponseQueryMaximumId

// int64 id = 1;
inline void ResponseQueryMaximumId::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t ResponseQueryMaximumId::id() const {
  // @@protoc_insertion_point(field_get:MessageStructures.ResponseQueryMaximumId.id)
  return _internal_id();
}
inline void ResponseQueryMaximumId::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MessageStructures.ResponseQueryMaximumId.id)
}
inline ::int64_t ResponseQueryMaximumId::_internal_id() const {
  return _impl_.id_;
}
inline void ResponseQueryMaximumId::_internal_set_id(::int64_t value) {
  ;
  _impl_.id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace MessageStructures


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Communication_2eproto_2epb_2eh
