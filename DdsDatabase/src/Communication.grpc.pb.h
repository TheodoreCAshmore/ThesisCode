// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Communication.proto
#ifndef GRPC_Communication_2eproto__INCLUDED
#define GRPC_Communication_2eproto__INCLUDED

#include "Communication.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace MessageStructures {

class DatabaseCommunication final {
 public:
  static constexpr char const* service_full_name() {
    return "MessageStructures.DatabaseCommunication";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RequestPublish(::grpc::ClientContext* context, const ::MessageStructures::KineInsert& request, ::MessageStructures::ResponsePublish* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponsePublish>> AsyncRequestPublish(::grpc::ClientContext* context, const ::MessageStructures::KineInsert& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponsePublish>>(AsyncRequestPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponsePublish>> PrepareAsyncRequestPublish(::grpc::ClientContext* context, const ::MessageStructures::KineInsert& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponsePublish>>(PrepareAsyncRequestPublishRaw(context, request, cq));
    }
    // rpc RequestUpdate (KineInsert) returns (ResponsePublish) {}
    //
    virtual ::grpc::Status RequestDispose(::grpc::ClientContext* context, const ::MessageStructures::KineDispose& request, ::MessageStructures::ResponseDispose* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseDispose>> AsyncRequestDispose(::grpc::ClientContext* context, const ::MessageStructures::KineDispose& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseDispose>>(AsyncRequestDisposeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseDispose>> PrepareAsyncRequestDispose(::grpc::ClientContext* context, const ::MessageStructures::KineDispose& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseDispose>>(PrepareAsyncRequestDisposeRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestMassDisposeCompaction(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction& request, ::MessageStructures::ResponseMassDisposeCompaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseMassDisposeCompaction>> AsyncRequestMassDisposeCompaction(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseMassDisposeCompaction>>(AsyncRequestMassDisposeCompactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseMassDisposeCompaction>> PrepareAsyncRequestMassDisposeCompaction(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseMassDisposeCompaction>>(PrepareAsyncRequestMassDisposeCompactionRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestQueryGeneric(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric& request, ::MessageStructures::ResponseQueryGeneric* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryGeneric>> AsyncRequestQueryGeneric(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryGeneric>>(AsyncRequestQueryGenericRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryGeneric>> PrepareAsyncRequestQueryGeneric(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryGeneric>>(PrepareAsyncRequestQueryGenericRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestQueryThree(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree& request, ::MessageStructures::ResponseQueryThree* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryThree>> AsyncRequestQueryThree(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryThree>>(AsyncRequestQueryThreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryThree>> PrepareAsyncRequestQueryThree(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryThree>>(PrepareAsyncRequestQueryThreeRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestQueryCompactRevision(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision& request, ::MessageStructures::ResponseQueryCompactRevision* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryCompactRevision>> AsyncRequestQueryCompactRevision(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryCompactRevision>>(AsyncRequestQueryCompactRevisionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryCompactRevision>> PrepareAsyncRequestQueryCompactRevision(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryCompactRevision>>(PrepareAsyncRequestQueryCompactRevisionRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestQueryMaximumId(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId& request, ::MessageStructures::ResponseQueryMaximumId* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryMaximumId>> AsyncRequestQueryMaximumId(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryMaximumId>>(AsyncRequestQueryMaximumIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryMaximumId>> PrepareAsyncRequestQueryMaximumId(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryMaximumId>>(PrepareAsyncRequestQueryMaximumIdRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestTest(::grpc::ClientContext* context, const ::MessageStructures::KineTest& request, ::MessageStructures::ResponseTest* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseTest>> AsyncRequestTest(::grpc::ClientContext* context, const ::MessageStructures::KineTest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseTest>>(AsyncRequestTestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseTest>> PrepareAsyncRequestTest(::grpc::ClientContext* context, const ::MessageStructures::KineTest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseTest>>(PrepareAsyncRequestTestRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RequestPublish(::grpc::ClientContext* context, const ::MessageStructures::KineInsert* request, ::MessageStructures::ResponsePublish* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestPublish(::grpc::ClientContext* context, const ::MessageStructures::KineInsert* request, ::MessageStructures::ResponsePublish* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // rpc RequestUpdate (KineInsert) returns (ResponsePublish) {}
      //
      virtual void RequestDispose(::grpc::ClientContext* context, const ::MessageStructures::KineDispose* request, ::MessageStructures::ResponseDispose* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestDispose(::grpc::ClientContext* context, const ::MessageStructures::KineDispose* request, ::MessageStructures::ResponseDispose* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestMassDisposeCompaction(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction* request, ::MessageStructures::ResponseMassDisposeCompaction* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestMassDisposeCompaction(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction* request, ::MessageStructures::ResponseMassDisposeCompaction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestQueryGeneric(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric* request, ::MessageStructures::ResponseQueryGeneric* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestQueryGeneric(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric* request, ::MessageStructures::ResponseQueryGeneric* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestQueryThree(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree* request, ::MessageStructures::ResponseQueryThree* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestQueryThree(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree* request, ::MessageStructures::ResponseQueryThree* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestQueryCompactRevision(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision* request, ::MessageStructures::ResponseQueryCompactRevision* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestQueryCompactRevision(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision* request, ::MessageStructures::ResponseQueryCompactRevision* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestQueryMaximumId(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId* request, ::MessageStructures::ResponseQueryMaximumId* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestQueryMaximumId(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId* request, ::MessageStructures::ResponseQueryMaximumId* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestTest(::grpc::ClientContext* context, const ::MessageStructures::KineTest* request, ::MessageStructures::ResponseTest* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestTest(::grpc::ClientContext* context, const ::MessageStructures::KineTest* request, ::MessageStructures::ResponseTest* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponsePublish>* AsyncRequestPublishRaw(::grpc::ClientContext* context, const ::MessageStructures::KineInsert& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponsePublish>* PrepareAsyncRequestPublishRaw(::grpc::ClientContext* context, const ::MessageStructures::KineInsert& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseDispose>* AsyncRequestDisposeRaw(::grpc::ClientContext* context, const ::MessageStructures::KineDispose& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseDispose>* PrepareAsyncRequestDisposeRaw(::grpc::ClientContext* context, const ::MessageStructures::KineDispose& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseMassDisposeCompaction>* AsyncRequestMassDisposeCompactionRaw(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseMassDisposeCompaction>* PrepareAsyncRequestMassDisposeCompactionRaw(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryGeneric>* AsyncRequestQueryGenericRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryGeneric>* PrepareAsyncRequestQueryGenericRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryThree>* AsyncRequestQueryThreeRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryThree>* PrepareAsyncRequestQueryThreeRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryCompactRevision>* AsyncRequestQueryCompactRevisionRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryCompactRevision>* PrepareAsyncRequestQueryCompactRevisionRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryMaximumId>* AsyncRequestQueryMaximumIdRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseQueryMaximumId>* PrepareAsyncRequestQueryMaximumIdRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseTest>* AsyncRequestTestRaw(::grpc::ClientContext* context, const ::MessageStructures::KineTest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MessageStructures::ResponseTest>* PrepareAsyncRequestTestRaw(::grpc::ClientContext* context, const ::MessageStructures::KineTest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RequestPublish(::grpc::ClientContext* context, const ::MessageStructures::KineInsert& request, ::MessageStructures::ResponsePublish* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponsePublish>> AsyncRequestPublish(::grpc::ClientContext* context, const ::MessageStructures::KineInsert& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponsePublish>>(AsyncRequestPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponsePublish>> PrepareAsyncRequestPublish(::grpc::ClientContext* context, const ::MessageStructures::KineInsert& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponsePublish>>(PrepareAsyncRequestPublishRaw(context, request, cq));
    }
    ::grpc::Status RequestDispose(::grpc::ClientContext* context, const ::MessageStructures::KineDispose& request, ::MessageStructures::ResponseDispose* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseDispose>> AsyncRequestDispose(::grpc::ClientContext* context, const ::MessageStructures::KineDispose& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseDispose>>(AsyncRequestDisposeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseDispose>> PrepareAsyncRequestDispose(::grpc::ClientContext* context, const ::MessageStructures::KineDispose& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseDispose>>(PrepareAsyncRequestDisposeRaw(context, request, cq));
    }
    ::grpc::Status RequestMassDisposeCompaction(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction& request, ::MessageStructures::ResponseMassDisposeCompaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseMassDisposeCompaction>> AsyncRequestMassDisposeCompaction(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseMassDisposeCompaction>>(AsyncRequestMassDisposeCompactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseMassDisposeCompaction>> PrepareAsyncRequestMassDisposeCompaction(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseMassDisposeCompaction>>(PrepareAsyncRequestMassDisposeCompactionRaw(context, request, cq));
    }
    ::grpc::Status RequestQueryGeneric(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric& request, ::MessageStructures::ResponseQueryGeneric* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryGeneric>> AsyncRequestQueryGeneric(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryGeneric>>(AsyncRequestQueryGenericRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryGeneric>> PrepareAsyncRequestQueryGeneric(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryGeneric>>(PrepareAsyncRequestQueryGenericRaw(context, request, cq));
    }
    ::grpc::Status RequestQueryThree(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree& request, ::MessageStructures::ResponseQueryThree* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryThree>> AsyncRequestQueryThree(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryThree>>(AsyncRequestQueryThreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryThree>> PrepareAsyncRequestQueryThree(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryThree>>(PrepareAsyncRequestQueryThreeRaw(context, request, cq));
    }
    ::grpc::Status RequestQueryCompactRevision(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision& request, ::MessageStructures::ResponseQueryCompactRevision* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryCompactRevision>> AsyncRequestQueryCompactRevision(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryCompactRevision>>(AsyncRequestQueryCompactRevisionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryCompactRevision>> PrepareAsyncRequestQueryCompactRevision(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryCompactRevision>>(PrepareAsyncRequestQueryCompactRevisionRaw(context, request, cq));
    }
    ::grpc::Status RequestQueryMaximumId(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId& request, ::MessageStructures::ResponseQueryMaximumId* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryMaximumId>> AsyncRequestQueryMaximumId(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryMaximumId>>(AsyncRequestQueryMaximumIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryMaximumId>> PrepareAsyncRequestQueryMaximumId(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryMaximumId>>(PrepareAsyncRequestQueryMaximumIdRaw(context, request, cq));
    }
    ::grpc::Status RequestTest(::grpc::ClientContext* context, const ::MessageStructures::KineTest& request, ::MessageStructures::ResponseTest* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseTest>> AsyncRequestTest(::grpc::ClientContext* context, const ::MessageStructures::KineTest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseTest>>(AsyncRequestTestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseTest>> PrepareAsyncRequestTest(::grpc::ClientContext* context, const ::MessageStructures::KineTest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseTest>>(PrepareAsyncRequestTestRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RequestPublish(::grpc::ClientContext* context, const ::MessageStructures::KineInsert* request, ::MessageStructures::ResponsePublish* response, std::function<void(::grpc::Status)>) override;
      void RequestPublish(::grpc::ClientContext* context, const ::MessageStructures::KineInsert* request, ::MessageStructures::ResponsePublish* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestDispose(::grpc::ClientContext* context, const ::MessageStructures::KineDispose* request, ::MessageStructures::ResponseDispose* response, std::function<void(::grpc::Status)>) override;
      void RequestDispose(::grpc::ClientContext* context, const ::MessageStructures::KineDispose* request, ::MessageStructures::ResponseDispose* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestMassDisposeCompaction(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction* request, ::MessageStructures::ResponseMassDisposeCompaction* response, std::function<void(::grpc::Status)>) override;
      void RequestMassDisposeCompaction(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction* request, ::MessageStructures::ResponseMassDisposeCompaction* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestQueryGeneric(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric* request, ::MessageStructures::ResponseQueryGeneric* response, std::function<void(::grpc::Status)>) override;
      void RequestQueryGeneric(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric* request, ::MessageStructures::ResponseQueryGeneric* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestQueryThree(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree* request, ::MessageStructures::ResponseQueryThree* response, std::function<void(::grpc::Status)>) override;
      void RequestQueryThree(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree* request, ::MessageStructures::ResponseQueryThree* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestQueryCompactRevision(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision* request, ::MessageStructures::ResponseQueryCompactRevision* response, std::function<void(::grpc::Status)>) override;
      void RequestQueryCompactRevision(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision* request, ::MessageStructures::ResponseQueryCompactRevision* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestQueryMaximumId(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId* request, ::MessageStructures::ResponseQueryMaximumId* response, std::function<void(::grpc::Status)>) override;
      void RequestQueryMaximumId(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId* request, ::MessageStructures::ResponseQueryMaximumId* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestTest(::grpc::ClientContext* context, const ::MessageStructures::KineTest* request, ::MessageStructures::ResponseTest* response, std::function<void(::grpc::Status)>) override;
      void RequestTest(::grpc::ClientContext* context, const ::MessageStructures::KineTest* request, ::MessageStructures::ResponseTest* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponsePublish>* AsyncRequestPublishRaw(::grpc::ClientContext* context, const ::MessageStructures::KineInsert& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponsePublish>* PrepareAsyncRequestPublishRaw(::grpc::ClientContext* context, const ::MessageStructures::KineInsert& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseDispose>* AsyncRequestDisposeRaw(::grpc::ClientContext* context, const ::MessageStructures::KineDispose& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseDispose>* PrepareAsyncRequestDisposeRaw(::grpc::ClientContext* context, const ::MessageStructures::KineDispose& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseMassDisposeCompaction>* AsyncRequestMassDisposeCompactionRaw(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseMassDisposeCompaction>* PrepareAsyncRequestMassDisposeCompactionRaw(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryGeneric>* AsyncRequestQueryGenericRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryGeneric>* PrepareAsyncRequestQueryGenericRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryThree>* AsyncRequestQueryThreeRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryThree>* PrepareAsyncRequestQueryThreeRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryCompactRevision>* AsyncRequestQueryCompactRevisionRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryCompactRevision>* PrepareAsyncRequestQueryCompactRevisionRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryMaximumId>* AsyncRequestQueryMaximumIdRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryMaximumId>* PrepareAsyncRequestQueryMaximumIdRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseTest>* AsyncRequestTestRaw(::grpc::ClientContext* context, const ::MessageStructures::KineTest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseTest>* PrepareAsyncRequestTestRaw(::grpc::ClientContext* context, const ::MessageStructures::KineTest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestPublish_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestDispose_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestMassDisposeCompaction_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestQueryGeneric_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestQueryThree_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestQueryCompactRevision_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestQueryMaximumId_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestTest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequestPublish(::grpc::ServerContext* context, const ::MessageStructures::KineInsert* request, ::MessageStructures::ResponsePublish* response);
    // rpc RequestUpdate (KineInsert) returns (ResponsePublish) {}
    //
    virtual ::grpc::Status RequestDispose(::grpc::ServerContext* context, const ::MessageStructures::KineDispose* request, ::MessageStructures::ResponseDispose* response);
    virtual ::grpc::Status RequestMassDisposeCompaction(::grpc::ServerContext* context, const ::MessageStructures::KineMassDisposeCompaction* request, ::MessageStructures::ResponseMassDisposeCompaction* response);
    virtual ::grpc::Status RequestQueryGeneric(::grpc::ServerContext* context, const ::MessageStructures::KineQueryGeneric* request, ::MessageStructures::ResponseQueryGeneric* response);
    virtual ::grpc::Status RequestQueryThree(::grpc::ServerContext* context, const ::MessageStructures::KineQueryThree* request, ::MessageStructures::ResponseQueryThree* response);
    virtual ::grpc::Status RequestQueryCompactRevision(::grpc::ServerContext* context, const ::MessageStructures::KineQueryCompactRevision* request, ::MessageStructures::ResponseQueryCompactRevision* response);
    virtual ::grpc::Status RequestQueryMaximumId(::grpc::ServerContext* context, const ::MessageStructures::KineQueryMaximumId* request, ::MessageStructures::ResponseQueryMaximumId* response);
    virtual ::grpc::Status RequestTest(::grpc::ServerContext* context, const ::MessageStructures::KineTest* request, ::MessageStructures::ResponseTest* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestPublish() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPublish(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineInsert* /*request*/, ::MessageStructures::ResponsePublish* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestPublish(::grpc::ServerContext* context, ::MessageStructures::KineInsert* request, ::grpc::ServerAsyncResponseWriter< ::MessageStructures::ResponsePublish>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestDispose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestDispose() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RequestDispose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestDispose(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineDispose* /*request*/, ::MessageStructures::ResponseDispose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestDispose(::grpc::ServerContext* context, ::MessageStructures::KineDispose* request, ::grpc::ServerAsyncResponseWriter< ::MessageStructures::ResponseDispose>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestMassDisposeCompaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestMassDisposeCompaction() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RequestMassDisposeCompaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestMassDisposeCompaction(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineMassDisposeCompaction* /*request*/, ::MessageStructures::ResponseMassDisposeCompaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestMassDisposeCompaction(::grpc::ServerContext* context, ::MessageStructures::KineMassDisposeCompaction* request, ::grpc::ServerAsyncResponseWriter< ::MessageStructures::ResponseMassDisposeCompaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestQueryGeneric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestQueryGeneric() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RequestQueryGeneric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryGeneric(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryGeneric* /*request*/, ::MessageStructures::ResponseQueryGeneric* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestQueryGeneric(::grpc::ServerContext* context, ::MessageStructures::KineQueryGeneric* request, ::grpc::ServerAsyncResponseWriter< ::MessageStructures::ResponseQueryGeneric>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestQueryThree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestQueryThree() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RequestQueryThree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryThree(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryThree* /*request*/, ::MessageStructures::ResponseQueryThree* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestQueryThree(::grpc::ServerContext* context, ::MessageStructures::KineQueryThree* request, ::grpc::ServerAsyncResponseWriter< ::MessageStructures::ResponseQueryThree>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestQueryCompactRevision : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestQueryCompactRevision() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RequestQueryCompactRevision() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryCompactRevision(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryCompactRevision* /*request*/, ::MessageStructures::ResponseQueryCompactRevision* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestQueryCompactRevision(::grpc::ServerContext* context, ::MessageStructures::KineQueryCompactRevision* request, ::grpc::ServerAsyncResponseWriter< ::MessageStructures::ResponseQueryCompactRevision>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestQueryMaximumId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestQueryMaximumId() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RequestQueryMaximumId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryMaximumId(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryMaximumId* /*request*/, ::MessageStructures::ResponseQueryMaximumId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestQueryMaximumId(::grpc::ServerContext* context, ::MessageStructures::KineQueryMaximumId* request, ::grpc::ServerAsyncResponseWriter< ::MessageStructures::ResponseQueryMaximumId>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestTest() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_RequestTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestTest(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineTest* /*request*/, ::MessageStructures::ResponseTest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestTest(::grpc::ServerContext* context, ::MessageStructures::KineTest* request, ::grpc::ServerAsyncResponseWriter< ::MessageStructures::ResponseTest>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestPublish<WithAsyncMethod_RequestDispose<WithAsyncMethod_RequestMassDisposeCompaction<WithAsyncMethod_RequestQueryGeneric<WithAsyncMethod_RequestQueryThree<WithAsyncMethod_RequestQueryCompactRevision<WithAsyncMethod_RequestQueryMaximumId<WithAsyncMethod_RequestTest<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RequestPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestPublish() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineInsert, ::MessageStructures::ResponsePublish>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MessageStructures::KineInsert* request, ::MessageStructures::ResponsePublish* response) { return this->RequestPublish(context, request, response); }));}
    void SetMessageAllocatorFor_RequestPublish(
        ::grpc::MessageAllocator< ::MessageStructures::KineInsert, ::MessageStructures::ResponsePublish>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineInsert, ::MessageStructures::ResponsePublish>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPublish(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineInsert* /*request*/, ::MessageStructures::ResponsePublish* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestPublish(
      ::grpc::CallbackServerContext* /*context*/, const ::MessageStructures::KineInsert* /*request*/, ::MessageStructures::ResponsePublish* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestDispose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestDispose() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineDispose, ::MessageStructures::ResponseDispose>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MessageStructures::KineDispose* request, ::MessageStructures::ResponseDispose* response) { return this->RequestDispose(context, request, response); }));}
    void SetMessageAllocatorFor_RequestDispose(
        ::grpc::MessageAllocator< ::MessageStructures::KineDispose, ::MessageStructures::ResponseDispose>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineDispose, ::MessageStructures::ResponseDispose>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestDispose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestDispose(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineDispose* /*request*/, ::MessageStructures::ResponseDispose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestDispose(
      ::grpc::CallbackServerContext* /*context*/, const ::MessageStructures::KineDispose* /*request*/, ::MessageStructures::ResponseDispose* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestMassDisposeCompaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestMassDisposeCompaction() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineMassDisposeCompaction, ::MessageStructures::ResponseMassDisposeCompaction>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MessageStructures::KineMassDisposeCompaction* request, ::MessageStructures::ResponseMassDisposeCompaction* response) { return this->RequestMassDisposeCompaction(context, request, response); }));}
    void SetMessageAllocatorFor_RequestMassDisposeCompaction(
        ::grpc::MessageAllocator< ::MessageStructures::KineMassDisposeCompaction, ::MessageStructures::ResponseMassDisposeCompaction>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineMassDisposeCompaction, ::MessageStructures::ResponseMassDisposeCompaction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestMassDisposeCompaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestMassDisposeCompaction(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineMassDisposeCompaction* /*request*/, ::MessageStructures::ResponseMassDisposeCompaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestMassDisposeCompaction(
      ::grpc::CallbackServerContext* /*context*/, const ::MessageStructures::KineMassDisposeCompaction* /*request*/, ::MessageStructures::ResponseMassDisposeCompaction* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestQueryGeneric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestQueryGeneric() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineQueryGeneric, ::MessageStructures::ResponseQueryGeneric>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MessageStructures::KineQueryGeneric* request, ::MessageStructures::ResponseQueryGeneric* response) { return this->RequestQueryGeneric(context, request, response); }));}
    void SetMessageAllocatorFor_RequestQueryGeneric(
        ::grpc::MessageAllocator< ::MessageStructures::KineQueryGeneric, ::MessageStructures::ResponseQueryGeneric>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineQueryGeneric, ::MessageStructures::ResponseQueryGeneric>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestQueryGeneric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryGeneric(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryGeneric* /*request*/, ::MessageStructures::ResponseQueryGeneric* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestQueryGeneric(
      ::grpc::CallbackServerContext* /*context*/, const ::MessageStructures::KineQueryGeneric* /*request*/, ::MessageStructures::ResponseQueryGeneric* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestQueryThree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestQueryThree() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineQueryThree, ::MessageStructures::ResponseQueryThree>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MessageStructures::KineQueryThree* request, ::MessageStructures::ResponseQueryThree* response) { return this->RequestQueryThree(context, request, response); }));}
    void SetMessageAllocatorFor_RequestQueryThree(
        ::grpc::MessageAllocator< ::MessageStructures::KineQueryThree, ::MessageStructures::ResponseQueryThree>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineQueryThree, ::MessageStructures::ResponseQueryThree>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestQueryThree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryThree(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryThree* /*request*/, ::MessageStructures::ResponseQueryThree* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestQueryThree(
      ::grpc::CallbackServerContext* /*context*/, const ::MessageStructures::KineQueryThree* /*request*/, ::MessageStructures::ResponseQueryThree* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestQueryCompactRevision : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestQueryCompactRevision() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineQueryCompactRevision, ::MessageStructures::ResponseQueryCompactRevision>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MessageStructures::KineQueryCompactRevision* request, ::MessageStructures::ResponseQueryCompactRevision* response) { return this->RequestQueryCompactRevision(context, request, response); }));}
    void SetMessageAllocatorFor_RequestQueryCompactRevision(
        ::grpc::MessageAllocator< ::MessageStructures::KineQueryCompactRevision, ::MessageStructures::ResponseQueryCompactRevision>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineQueryCompactRevision, ::MessageStructures::ResponseQueryCompactRevision>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestQueryCompactRevision() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryCompactRevision(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryCompactRevision* /*request*/, ::MessageStructures::ResponseQueryCompactRevision* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestQueryCompactRevision(
      ::grpc::CallbackServerContext* /*context*/, const ::MessageStructures::KineQueryCompactRevision* /*request*/, ::MessageStructures::ResponseQueryCompactRevision* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestQueryMaximumId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestQueryMaximumId() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineQueryMaximumId, ::MessageStructures::ResponseQueryMaximumId>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MessageStructures::KineQueryMaximumId* request, ::MessageStructures::ResponseQueryMaximumId* response) { return this->RequestQueryMaximumId(context, request, response); }));}
    void SetMessageAllocatorFor_RequestQueryMaximumId(
        ::grpc::MessageAllocator< ::MessageStructures::KineQueryMaximumId, ::MessageStructures::ResponseQueryMaximumId>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineQueryMaximumId, ::MessageStructures::ResponseQueryMaximumId>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestQueryMaximumId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryMaximumId(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryMaximumId* /*request*/, ::MessageStructures::ResponseQueryMaximumId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestQueryMaximumId(
      ::grpc::CallbackServerContext* /*context*/, const ::MessageStructures::KineQueryMaximumId* /*request*/, ::MessageStructures::ResponseQueryMaximumId* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestTest() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineTest, ::MessageStructures::ResponseTest>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MessageStructures::KineTest* request, ::MessageStructures::ResponseTest* response) { return this->RequestTest(context, request, response); }));}
    void SetMessageAllocatorFor_RequestTest(
        ::grpc::MessageAllocator< ::MessageStructures::KineTest, ::MessageStructures::ResponseTest>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MessageStructures::KineTest, ::MessageStructures::ResponseTest>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestTest(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineTest* /*request*/, ::MessageStructures::ResponseTest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestTest(
      ::grpc::CallbackServerContext* /*context*/, const ::MessageStructures::KineTest* /*request*/, ::MessageStructures::ResponseTest* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RequestPublish<WithCallbackMethod_RequestDispose<WithCallbackMethod_RequestMassDisposeCompaction<WithCallbackMethod_RequestQueryGeneric<WithCallbackMethod_RequestQueryThree<WithCallbackMethod_RequestQueryCompactRevision<WithCallbackMethod_RequestQueryMaximumId<WithCallbackMethod_RequestTest<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestPublish() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPublish(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineInsert* /*request*/, ::MessageStructures::ResponsePublish* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestDispose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestDispose() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RequestDispose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestDispose(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineDispose* /*request*/, ::MessageStructures::ResponseDispose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestMassDisposeCompaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestMassDisposeCompaction() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RequestMassDisposeCompaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestMassDisposeCompaction(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineMassDisposeCompaction* /*request*/, ::MessageStructures::ResponseMassDisposeCompaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestQueryGeneric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestQueryGeneric() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RequestQueryGeneric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryGeneric(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryGeneric* /*request*/, ::MessageStructures::ResponseQueryGeneric* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestQueryThree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestQueryThree() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RequestQueryThree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryThree(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryThree* /*request*/, ::MessageStructures::ResponseQueryThree* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestQueryCompactRevision : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestQueryCompactRevision() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RequestQueryCompactRevision() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryCompactRevision(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryCompactRevision* /*request*/, ::MessageStructures::ResponseQueryCompactRevision* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestQueryMaximumId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestQueryMaximumId() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RequestQueryMaximumId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryMaximumId(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryMaximumId* /*request*/, ::MessageStructures::ResponseQueryMaximumId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestTest() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_RequestTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestTest(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineTest* /*request*/, ::MessageStructures::ResponseTest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestPublish() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPublish(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineInsert* /*request*/, ::MessageStructures::ResponsePublish* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestPublish(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestDispose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestDispose() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RequestDispose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestDispose(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineDispose* /*request*/, ::MessageStructures::ResponseDispose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestDispose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestMassDisposeCompaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestMassDisposeCompaction() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RequestMassDisposeCompaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestMassDisposeCompaction(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineMassDisposeCompaction* /*request*/, ::MessageStructures::ResponseMassDisposeCompaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestMassDisposeCompaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestQueryGeneric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestQueryGeneric() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RequestQueryGeneric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryGeneric(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryGeneric* /*request*/, ::MessageStructures::ResponseQueryGeneric* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestQueryGeneric(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestQueryThree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestQueryThree() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RequestQueryThree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryThree(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryThree* /*request*/, ::MessageStructures::ResponseQueryThree* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestQueryThree(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestQueryCompactRevision : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestQueryCompactRevision() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RequestQueryCompactRevision() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryCompactRevision(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryCompactRevision* /*request*/, ::MessageStructures::ResponseQueryCompactRevision* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestQueryCompactRevision(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestQueryMaximumId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestQueryMaximumId() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_RequestQueryMaximumId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryMaximumId(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryMaximumId* /*request*/, ::MessageStructures::ResponseQueryMaximumId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestQueryMaximumId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestTest() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_RequestTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestTest(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineTest* /*request*/, ::MessageStructures::ResponseTest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestTest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestPublish() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestPublish(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPublish(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineInsert* /*request*/, ::MessageStructures::ResponsePublish* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestPublish(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestDispose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestDispose() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestDispose(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestDispose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestDispose(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineDispose* /*request*/, ::MessageStructures::ResponseDispose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestDispose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestMassDisposeCompaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestMassDisposeCompaction() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestMassDisposeCompaction(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestMassDisposeCompaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestMassDisposeCompaction(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineMassDisposeCompaction* /*request*/, ::MessageStructures::ResponseMassDisposeCompaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestMassDisposeCompaction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestQueryGeneric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestQueryGeneric() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestQueryGeneric(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestQueryGeneric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryGeneric(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryGeneric* /*request*/, ::MessageStructures::ResponseQueryGeneric* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestQueryGeneric(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestQueryThree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestQueryThree() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestQueryThree(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestQueryThree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryThree(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryThree* /*request*/, ::MessageStructures::ResponseQueryThree* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestQueryThree(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestQueryCompactRevision : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestQueryCompactRevision() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestQueryCompactRevision(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestQueryCompactRevision() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryCompactRevision(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryCompactRevision* /*request*/, ::MessageStructures::ResponseQueryCompactRevision* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestQueryCompactRevision(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestQueryMaximumId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestQueryMaximumId() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestQueryMaximumId(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestQueryMaximumId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestQueryMaximumId(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryMaximumId* /*request*/, ::MessageStructures::ResponseQueryMaximumId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestQueryMaximumId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestTest() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestTest(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestTest(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineTest* /*request*/, ::MessageStructures::ResponseTest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestTest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestPublish() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MessageStructures::KineInsert, ::MessageStructures::ResponsePublish>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MessageStructures::KineInsert, ::MessageStructures::ResponsePublish>* streamer) {
                       return this->StreamedRequestPublish(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestPublish(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineInsert* /*request*/, ::MessageStructures::ResponsePublish* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestPublish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MessageStructures::KineInsert,::MessageStructures::ResponsePublish>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestDispose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestDispose() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MessageStructures::KineDispose, ::MessageStructures::ResponseDispose>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MessageStructures::KineDispose, ::MessageStructures::ResponseDispose>* streamer) {
                       return this->StreamedRequestDispose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestDispose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestDispose(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineDispose* /*request*/, ::MessageStructures::ResponseDispose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestDispose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MessageStructures::KineDispose,::MessageStructures::ResponseDispose>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestMassDisposeCompaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestMassDisposeCompaction() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MessageStructures::KineMassDisposeCompaction, ::MessageStructures::ResponseMassDisposeCompaction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MessageStructures::KineMassDisposeCompaction, ::MessageStructures::ResponseMassDisposeCompaction>* streamer) {
                       return this->StreamedRequestMassDisposeCompaction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestMassDisposeCompaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestMassDisposeCompaction(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineMassDisposeCompaction* /*request*/, ::MessageStructures::ResponseMassDisposeCompaction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestMassDisposeCompaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MessageStructures::KineMassDisposeCompaction,::MessageStructures::ResponseMassDisposeCompaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestQueryGeneric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestQueryGeneric() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MessageStructures::KineQueryGeneric, ::MessageStructures::ResponseQueryGeneric>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MessageStructures::KineQueryGeneric, ::MessageStructures::ResponseQueryGeneric>* streamer) {
                       return this->StreamedRequestQueryGeneric(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestQueryGeneric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestQueryGeneric(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryGeneric* /*request*/, ::MessageStructures::ResponseQueryGeneric* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestQueryGeneric(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MessageStructures::KineQueryGeneric,::MessageStructures::ResponseQueryGeneric>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestQueryThree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestQueryThree() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MessageStructures::KineQueryThree, ::MessageStructures::ResponseQueryThree>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MessageStructures::KineQueryThree, ::MessageStructures::ResponseQueryThree>* streamer) {
                       return this->StreamedRequestQueryThree(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestQueryThree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestQueryThree(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryThree* /*request*/, ::MessageStructures::ResponseQueryThree* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestQueryThree(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MessageStructures::KineQueryThree,::MessageStructures::ResponseQueryThree>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestQueryCompactRevision : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestQueryCompactRevision() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MessageStructures::KineQueryCompactRevision, ::MessageStructures::ResponseQueryCompactRevision>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MessageStructures::KineQueryCompactRevision, ::MessageStructures::ResponseQueryCompactRevision>* streamer) {
                       return this->StreamedRequestQueryCompactRevision(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestQueryCompactRevision() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestQueryCompactRevision(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryCompactRevision* /*request*/, ::MessageStructures::ResponseQueryCompactRevision* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestQueryCompactRevision(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MessageStructures::KineQueryCompactRevision,::MessageStructures::ResponseQueryCompactRevision>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestQueryMaximumId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestQueryMaximumId() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MessageStructures::KineQueryMaximumId, ::MessageStructures::ResponseQueryMaximumId>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MessageStructures::KineQueryMaximumId, ::MessageStructures::ResponseQueryMaximumId>* streamer) {
                       return this->StreamedRequestQueryMaximumId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestQueryMaximumId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestQueryMaximumId(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineQueryMaximumId* /*request*/, ::MessageStructures::ResponseQueryMaximumId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestQueryMaximumId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MessageStructures::KineQueryMaximumId,::MessageStructures::ResponseQueryMaximumId>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestTest() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MessageStructures::KineTest, ::MessageStructures::ResponseTest>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MessageStructures::KineTest, ::MessageStructures::ResponseTest>* streamer) {
                       return this->StreamedRequestTest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestTest(::grpc::ServerContext* /*context*/, const ::MessageStructures::KineTest* /*request*/, ::MessageStructures::ResponseTest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestTest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MessageStructures::KineTest,::MessageStructures::ResponseTest>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestPublish<WithStreamedUnaryMethod_RequestDispose<WithStreamedUnaryMethod_RequestMassDisposeCompaction<WithStreamedUnaryMethod_RequestQueryGeneric<WithStreamedUnaryMethod_RequestQueryThree<WithStreamedUnaryMethod_RequestQueryCompactRevision<WithStreamedUnaryMethod_RequestQueryMaximumId<WithStreamedUnaryMethod_RequestTest<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestPublish<WithStreamedUnaryMethod_RequestDispose<WithStreamedUnaryMethod_RequestMassDisposeCompaction<WithStreamedUnaryMethod_RequestQueryGeneric<WithStreamedUnaryMethod_RequestQueryThree<WithStreamedUnaryMethod_RequestQueryCompactRevision<WithStreamedUnaryMethod_RequestQueryMaximumId<WithStreamedUnaryMethod_RequestTest<Service > > > > > > > > StreamedService;
};

}  // namespace MessageStructures


#endif  // GRPC_Communication_2eproto__INCLUDED
