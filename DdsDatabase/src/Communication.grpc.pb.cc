// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Communication.proto

#include "Communication.pb.h"
#include "Communication.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace MessageStructures {

static const char* DatabaseCommunication_method_names[] = {
  "/MessageStructures.DatabaseCommunication/RequestPublish",
  "/MessageStructures.DatabaseCommunication/RequestDispose",
  "/MessageStructures.DatabaseCommunication/RequestMassDisposeCompaction",
  "/MessageStructures.DatabaseCommunication/RequestQueryGeneric",
  "/MessageStructures.DatabaseCommunication/RequestQueryThree",
  "/MessageStructures.DatabaseCommunication/RequestQueryCompactRevision",
  "/MessageStructures.DatabaseCommunication/RequestQueryMaximumId",
  "/MessageStructures.DatabaseCommunication/RequestTest",
};

std::unique_ptr< DatabaseCommunication::Stub> DatabaseCommunication::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DatabaseCommunication::Stub> stub(new DatabaseCommunication::Stub(channel, options));
  return stub;
}

DatabaseCommunication::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RequestPublish_(DatabaseCommunication_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestDispose_(DatabaseCommunication_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestMassDisposeCompaction_(DatabaseCommunication_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestQueryGeneric_(DatabaseCommunication_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestQueryThree_(DatabaseCommunication_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestQueryCompactRevision_(DatabaseCommunication_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestQueryMaximumId_(DatabaseCommunication_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestTest_(DatabaseCommunication_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DatabaseCommunication::Stub::RequestPublish(::grpc::ClientContext* context, const ::MessageStructures::KineInsert& request, ::MessageStructures::ResponsePublish* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MessageStructures::KineInsert, ::MessageStructures::ResponsePublish, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestPublish_, context, request, response);
}

void DatabaseCommunication::Stub::async::RequestPublish(::grpc::ClientContext* context, const ::MessageStructures::KineInsert* request, ::MessageStructures::ResponsePublish* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MessageStructures::KineInsert, ::MessageStructures::ResponsePublish, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestPublish_, context, request, response, std::move(f));
}

void DatabaseCommunication::Stub::async::RequestPublish(::grpc::ClientContext* context, const ::MessageStructures::KineInsert* request, ::MessageStructures::ResponsePublish* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestPublish_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponsePublish>* DatabaseCommunication::Stub::PrepareAsyncRequestPublishRaw(::grpc::ClientContext* context, const ::MessageStructures::KineInsert& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MessageStructures::ResponsePublish, ::MessageStructures::KineInsert, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestPublish_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponsePublish>* DatabaseCommunication::Stub::AsyncRequestPublishRaw(::grpc::ClientContext* context, const ::MessageStructures::KineInsert& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestPublishRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseCommunication::Stub::RequestDispose(::grpc::ClientContext* context, const ::MessageStructures::KineDispose& request, ::MessageStructures::ResponseDispose* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MessageStructures::KineDispose, ::MessageStructures::ResponseDispose, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestDispose_, context, request, response);
}

void DatabaseCommunication::Stub::async::RequestDispose(::grpc::ClientContext* context, const ::MessageStructures::KineDispose* request, ::MessageStructures::ResponseDispose* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MessageStructures::KineDispose, ::MessageStructures::ResponseDispose, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestDispose_, context, request, response, std::move(f));
}

void DatabaseCommunication::Stub::async::RequestDispose(::grpc::ClientContext* context, const ::MessageStructures::KineDispose* request, ::MessageStructures::ResponseDispose* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestDispose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseDispose>* DatabaseCommunication::Stub::PrepareAsyncRequestDisposeRaw(::grpc::ClientContext* context, const ::MessageStructures::KineDispose& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MessageStructures::ResponseDispose, ::MessageStructures::KineDispose, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestDispose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseDispose>* DatabaseCommunication::Stub::AsyncRequestDisposeRaw(::grpc::ClientContext* context, const ::MessageStructures::KineDispose& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestDisposeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseCommunication::Stub::RequestMassDisposeCompaction(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction& request, ::MessageStructures::ResponseMassDisposeCompaction* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MessageStructures::KineMassDisposeCompaction, ::MessageStructures::ResponseMassDisposeCompaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestMassDisposeCompaction_, context, request, response);
}

void DatabaseCommunication::Stub::async::RequestMassDisposeCompaction(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction* request, ::MessageStructures::ResponseMassDisposeCompaction* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MessageStructures::KineMassDisposeCompaction, ::MessageStructures::ResponseMassDisposeCompaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestMassDisposeCompaction_, context, request, response, std::move(f));
}

void DatabaseCommunication::Stub::async::RequestMassDisposeCompaction(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction* request, ::MessageStructures::ResponseMassDisposeCompaction* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestMassDisposeCompaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseMassDisposeCompaction>* DatabaseCommunication::Stub::PrepareAsyncRequestMassDisposeCompactionRaw(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MessageStructures::ResponseMassDisposeCompaction, ::MessageStructures::KineMassDisposeCompaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestMassDisposeCompaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseMassDisposeCompaction>* DatabaseCommunication::Stub::AsyncRequestMassDisposeCompactionRaw(::grpc::ClientContext* context, const ::MessageStructures::KineMassDisposeCompaction& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestMassDisposeCompactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseCommunication::Stub::RequestQueryGeneric(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric& request, ::MessageStructures::ResponseQueryGeneric* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MessageStructures::KineQueryGeneric, ::MessageStructures::ResponseQueryGeneric, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestQueryGeneric_, context, request, response);
}

void DatabaseCommunication::Stub::async::RequestQueryGeneric(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric* request, ::MessageStructures::ResponseQueryGeneric* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MessageStructures::KineQueryGeneric, ::MessageStructures::ResponseQueryGeneric, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestQueryGeneric_, context, request, response, std::move(f));
}

void DatabaseCommunication::Stub::async::RequestQueryGeneric(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric* request, ::MessageStructures::ResponseQueryGeneric* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestQueryGeneric_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryGeneric>* DatabaseCommunication::Stub::PrepareAsyncRequestQueryGenericRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MessageStructures::ResponseQueryGeneric, ::MessageStructures::KineQueryGeneric, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestQueryGeneric_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryGeneric>* DatabaseCommunication::Stub::AsyncRequestQueryGenericRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryGeneric& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestQueryGenericRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseCommunication::Stub::RequestQueryThree(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree& request, ::MessageStructures::ResponseQueryThree* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MessageStructures::KineQueryThree, ::MessageStructures::ResponseQueryThree, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestQueryThree_, context, request, response);
}

void DatabaseCommunication::Stub::async::RequestQueryThree(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree* request, ::MessageStructures::ResponseQueryThree* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MessageStructures::KineQueryThree, ::MessageStructures::ResponseQueryThree, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestQueryThree_, context, request, response, std::move(f));
}

void DatabaseCommunication::Stub::async::RequestQueryThree(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree* request, ::MessageStructures::ResponseQueryThree* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestQueryThree_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryThree>* DatabaseCommunication::Stub::PrepareAsyncRequestQueryThreeRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MessageStructures::ResponseQueryThree, ::MessageStructures::KineQueryThree, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestQueryThree_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryThree>* DatabaseCommunication::Stub::AsyncRequestQueryThreeRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryThree& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestQueryThreeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseCommunication::Stub::RequestQueryCompactRevision(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision& request, ::MessageStructures::ResponseQueryCompactRevision* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MessageStructures::KineQueryCompactRevision, ::MessageStructures::ResponseQueryCompactRevision, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestQueryCompactRevision_, context, request, response);
}

void DatabaseCommunication::Stub::async::RequestQueryCompactRevision(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision* request, ::MessageStructures::ResponseQueryCompactRevision* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MessageStructures::KineQueryCompactRevision, ::MessageStructures::ResponseQueryCompactRevision, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestQueryCompactRevision_, context, request, response, std::move(f));
}

void DatabaseCommunication::Stub::async::RequestQueryCompactRevision(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision* request, ::MessageStructures::ResponseQueryCompactRevision* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestQueryCompactRevision_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryCompactRevision>* DatabaseCommunication::Stub::PrepareAsyncRequestQueryCompactRevisionRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MessageStructures::ResponseQueryCompactRevision, ::MessageStructures::KineQueryCompactRevision, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestQueryCompactRevision_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryCompactRevision>* DatabaseCommunication::Stub::AsyncRequestQueryCompactRevisionRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryCompactRevision& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestQueryCompactRevisionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseCommunication::Stub::RequestQueryMaximumId(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId& request, ::MessageStructures::ResponseQueryMaximumId* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MessageStructures::KineQueryMaximumId, ::MessageStructures::ResponseQueryMaximumId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestQueryMaximumId_, context, request, response);
}

void DatabaseCommunication::Stub::async::RequestQueryMaximumId(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId* request, ::MessageStructures::ResponseQueryMaximumId* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MessageStructures::KineQueryMaximumId, ::MessageStructures::ResponseQueryMaximumId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestQueryMaximumId_, context, request, response, std::move(f));
}

void DatabaseCommunication::Stub::async::RequestQueryMaximumId(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId* request, ::MessageStructures::ResponseQueryMaximumId* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestQueryMaximumId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryMaximumId>* DatabaseCommunication::Stub::PrepareAsyncRequestQueryMaximumIdRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MessageStructures::ResponseQueryMaximumId, ::MessageStructures::KineQueryMaximumId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestQueryMaximumId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseQueryMaximumId>* DatabaseCommunication::Stub::AsyncRequestQueryMaximumIdRaw(::grpc::ClientContext* context, const ::MessageStructures::KineQueryMaximumId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestQueryMaximumIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseCommunication::Stub::RequestTest(::grpc::ClientContext* context, const ::MessageStructures::KineTest& request, ::MessageStructures::ResponseTest* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MessageStructures::KineTest, ::MessageStructures::ResponseTest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestTest_, context, request, response);
}

void DatabaseCommunication::Stub::async::RequestTest(::grpc::ClientContext* context, const ::MessageStructures::KineTest* request, ::MessageStructures::ResponseTest* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MessageStructures::KineTest, ::MessageStructures::ResponseTest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestTest_, context, request, response, std::move(f));
}

void DatabaseCommunication::Stub::async::RequestTest(::grpc::ClientContext* context, const ::MessageStructures::KineTest* request, ::MessageStructures::ResponseTest* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestTest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseTest>* DatabaseCommunication::Stub::PrepareAsyncRequestTestRaw(::grpc::ClientContext* context, const ::MessageStructures::KineTest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MessageStructures::ResponseTest, ::MessageStructures::KineTest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestTest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MessageStructures::ResponseTest>* DatabaseCommunication::Stub::AsyncRequestTestRaw(::grpc::ClientContext* context, const ::MessageStructures::KineTest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestTestRaw(context, request, cq);
  result->StartCall();
  return result;
}

DatabaseCommunication::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseCommunication_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseCommunication::Service, ::MessageStructures::KineInsert, ::MessageStructures::ResponsePublish, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MessageStructures::KineInsert* req,
             ::MessageStructures::ResponsePublish* resp) {
               return service->RequestPublish(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseCommunication_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseCommunication::Service, ::MessageStructures::KineDispose, ::MessageStructures::ResponseDispose, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MessageStructures::KineDispose* req,
             ::MessageStructures::ResponseDispose* resp) {
               return service->RequestDispose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseCommunication_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseCommunication::Service, ::MessageStructures::KineMassDisposeCompaction, ::MessageStructures::ResponseMassDisposeCompaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MessageStructures::KineMassDisposeCompaction* req,
             ::MessageStructures::ResponseMassDisposeCompaction* resp) {
               return service->RequestMassDisposeCompaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseCommunication_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseCommunication::Service, ::MessageStructures::KineQueryGeneric, ::MessageStructures::ResponseQueryGeneric, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MessageStructures::KineQueryGeneric* req,
             ::MessageStructures::ResponseQueryGeneric* resp) {
               return service->RequestQueryGeneric(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseCommunication_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseCommunication::Service, ::MessageStructures::KineQueryThree, ::MessageStructures::ResponseQueryThree, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MessageStructures::KineQueryThree* req,
             ::MessageStructures::ResponseQueryThree* resp) {
               return service->RequestQueryThree(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseCommunication_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseCommunication::Service, ::MessageStructures::KineQueryCompactRevision, ::MessageStructures::ResponseQueryCompactRevision, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MessageStructures::KineQueryCompactRevision* req,
             ::MessageStructures::ResponseQueryCompactRevision* resp) {
               return service->RequestQueryCompactRevision(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseCommunication_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseCommunication::Service, ::MessageStructures::KineQueryMaximumId, ::MessageStructures::ResponseQueryMaximumId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MessageStructures::KineQueryMaximumId* req,
             ::MessageStructures::ResponseQueryMaximumId* resp) {
               return service->RequestQueryMaximumId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseCommunication_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseCommunication::Service, ::MessageStructures::KineTest, ::MessageStructures::ResponseTest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseCommunication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MessageStructures::KineTest* req,
             ::MessageStructures::ResponseTest* resp) {
               return service->RequestTest(ctx, req, resp);
             }, this)));
}

DatabaseCommunication::Service::~Service() {
}

::grpc::Status DatabaseCommunication::Service::RequestPublish(::grpc::ServerContext* context, const ::MessageStructures::KineInsert* request, ::MessageStructures::ResponsePublish* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseCommunication::Service::RequestDispose(::grpc::ServerContext* context, const ::MessageStructures::KineDispose* request, ::MessageStructures::ResponseDispose* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseCommunication::Service::RequestMassDisposeCompaction(::grpc::ServerContext* context, const ::MessageStructures::KineMassDisposeCompaction* request, ::MessageStructures::ResponseMassDisposeCompaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseCommunication::Service::RequestQueryGeneric(::grpc::ServerContext* context, const ::MessageStructures::KineQueryGeneric* request, ::MessageStructures::ResponseQueryGeneric* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseCommunication::Service::RequestQueryThree(::grpc::ServerContext* context, const ::MessageStructures::KineQueryThree* request, ::MessageStructures::ResponseQueryThree* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseCommunication::Service::RequestQueryCompactRevision(::grpc::ServerContext* context, const ::MessageStructures::KineQueryCompactRevision* request, ::MessageStructures::ResponseQueryCompactRevision* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseCommunication::Service::RequestQueryMaximumId(::grpc::ServerContext* context, const ::MessageStructures::KineQueryMaximumId* request, ::MessageStructures::ResponseQueryMaximumId* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseCommunication::Service::RequestTest(::grpc::ServerContext* context, const ::MessageStructures::KineTest* request, ::MessageStructures::ResponseTest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MessageStructures

